// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WRDNFINISHEDWRITING_H_
#define FLATBUFFERS_GENERATED_WRDNFINISHEDWRITING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct FinishedWriting;
struct FinishedWritingBuilder;

struct FinishedWriting FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FinishedWritingBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "FinishedWriting";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVICE_ID = 4,
    VT_JOB_ID = 6,
    VT_ERROR_ENCOUNTERED = 8,
    VT_FILE_NAME = 10,
    VT_METADATA = 12,
    VT_MESSAGE = 14
  };
  const ::flatbuffers::String *service_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_ID);
  }
  ::flatbuffers::String *mutable_service_id() {
    return GetPointer<::flatbuffers::String *>(VT_SERVICE_ID);
  }
  const ::flatbuffers::String *job_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOB_ID);
  }
  ::flatbuffers::String *mutable_job_id() {
    return GetPointer<::flatbuffers::String *>(VT_JOB_ID);
  }
  bool error_encountered() const {
    return GetField<uint8_t>(VT_ERROR_ENCOUNTERED, 0) != 0;
  }
  bool mutate_error_encountered(bool _error_encountered = 0) {
    return SetField<uint8_t>(VT_ERROR_ENCOUNTERED, static_cast<uint8_t>(_error_encountered), 0);
  }
  const ::flatbuffers::String *file_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILE_NAME);
  }
  ::flatbuffers::String *mutable_file_name() {
    return GetPointer<::flatbuffers::String *>(VT_FILE_NAME);
  }
  const ::flatbuffers::String *metadata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METADATA);
  }
  ::flatbuffers::String *mutable_metadata() {
    return GetPointer<::flatbuffers::String *>(VT_METADATA);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  ::flatbuffers::String *mutable_message() {
    return GetPointer<::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SERVICE_ID) &&
           verifier.VerifyString(service_id()) &&
           VerifyOffsetRequired(verifier, VT_JOB_ID) &&
           verifier.VerifyString(job_id()) &&
           VerifyField<uint8_t>(verifier, VT_ERROR_ENCOUNTERED, 1) &&
           VerifyOffsetRequired(verifier, VT_FILE_NAME) &&
           verifier.VerifyString(file_name()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct FinishedWritingBuilder {
  typedef FinishedWriting Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_service_id(::flatbuffers::Offset<::flatbuffers::String> service_id) {
    fbb_.AddOffset(FinishedWriting::VT_SERVICE_ID, service_id);
  }
  void add_job_id(::flatbuffers::Offset<::flatbuffers::String> job_id) {
    fbb_.AddOffset(FinishedWriting::VT_JOB_ID, job_id);
  }
  void add_error_encountered(bool error_encountered) {
    fbb_.AddElement<uint8_t>(FinishedWriting::VT_ERROR_ENCOUNTERED, static_cast<uint8_t>(error_encountered), 0);
  }
  void add_file_name(::flatbuffers::Offset<::flatbuffers::String> file_name) {
    fbb_.AddOffset(FinishedWriting::VT_FILE_NAME, file_name);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::String> metadata) {
    fbb_.AddOffset(FinishedWriting::VT_METADATA, metadata);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(FinishedWriting::VT_MESSAGE, message);
  }
  explicit FinishedWritingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FinishedWriting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FinishedWriting>(end);
    fbb_.Required(o, FinishedWriting::VT_SERVICE_ID);
    fbb_.Required(o, FinishedWriting::VT_JOB_ID);
    fbb_.Required(o, FinishedWriting::VT_FILE_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<FinishedWriting> CreateFinishedWriting(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> service_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> job_id = 0,
    bool error_encountered = false,
    ::flatbuffers::Offset<::flatbuffers::String> file_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  FinishedWritingBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_metadata(metadata);
  builder_.add_file_name(file_name);
  builder_.add_job_id(job_id);
  builder_.add_service_id(service_id);
  builder_.add_error_encountered(error_encountered);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FinishedWriting> CreateFinishedWritingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *service_id = nullptr,
    const char *job_id = nullptr,
    bool error_encountered = false,
    const char *file_name = nullptr,
    const char *metadata = nullptr,
    const char *message = nullptr) {
  auto service_id__ = service_id ? _fbb.CreateString(service_id) : 0;
  auto job_id__ = job_id ? _fbb.CreateString(job_id) : 0;
  auto file_name__ = file_name ? _fbb.CreateString(file_name) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateFinishedWriting(
      _fbb,
      service_id__,
      job_id__,
      error_encountered,
      file_name__,
      metadata__,
      message__);
}

inline const FinishedWriting *GetFinishedWriting(const void *buf) {
  return ::flatbuffers::GetRoot<FinishedWriting>(buf);
}

inline const FinishedWriting *GetSizePrefixedFinishedWriting(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FinishedWriting>(buf);
}

inline FinishedWriting *GetMutableFinishedWriting(void *buf) {
  return ::flatbuffers::GetMutableRoot<FinishedWriting>(buf);
}

inline FinishedWriting *GetMutableSizePrefixedFinishedWriting(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<FinishedWriting>(buf);
}

inline const char *FinishedWritingIdentifier() {
  return "wrdn";
}

inline bool FinishedWritingBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FinishedWritingIdentifier());
}

inline bool SizePrefixedFinishedWritingBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FinishedWritingIdentifier(), true);
}

inline bool VerifyFinishedWritingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FinishedWriting>(FinishedWritingIdentifier());
}

inline bool VerifySizePrefixedFinishedWritingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FinishedWriting>(FinishedWritingIdentifier());
}

inline void FinishFinishedWritingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FinishedWriting> root) {
  fbb.Finish(root, FinishedWritingIdentifier());
}

inline void FinishSizePrefixedFinishedWritingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FinishedWriting> root) {
  fbb.FinishSizePrefixed(root, FinishedWritingIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_WRDNFINISHEDWRITING_H_
