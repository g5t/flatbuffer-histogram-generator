// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NS10CACHEENTRY_H_
#define FLATBUFFERS_GENERATED_NS10CACHEENTRY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct CacheEntry;
struct CacheEntryBuilder;

/// pylint: skip-file
struct CacheEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CacheEntryBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "CacheEntry";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_TIME = 6,
    VT_TTL = 8,
    VT_EXPIRED = 10,
    VT_VALUE = 12
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  ::flatbuffers::String *mutable_key() {
    return GetPointer<::flatbuffers::String *>(VT_KEY);
  }
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  bool mutate_time(double _time = 0.0) {
    return SetField<double>(VT_TIME, _time, 0.0);
  }
  double ttl() const {
    return GetField<double>(VT_TTL, 0.0);
  }
  bool mutate_ttl(double _ttl = 0.0) {
    return SetField<double>(VT_TTL, _ttl, 0.0);
  }
  bool expired() const {
    return GetField<uint8_t>(VT_EXPIRED, 0) != 0;
  }
  bool mutate_expired(bool _expired = 0) {
    return SetField<uint8_t>(VT_EXPIRED, static_cast<uint8_t>(_expired), 0);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  ::flatbuffers::String *mutable_value() {
    return GetPointer<::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<double>(verifier, VT_TIME, 8) &&
           VerifyField<double>(verifier, VT_TTL, 8) &&
           VerifyField<uint8_t>(verifier, VT_EXPIRED, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct CacheEntryBuilder {
  typedef CacheEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(CacheEntry::VT_KEY, key);
  }
  void add_time(double time) {
    fbb_.AddElement<double>(CacheEntry::VT_TIME, time, 0.0);
  }
  void add_ttl(double ttl) {
    fbb_.AddElement<double>(CacheEntry::VT_TTL, ttl, 0.0);
  }
  void add_expired(bool expired) {
    fbb_.AddElement<uint8_t>(CacheEntry::VT_EXPIRED, static_cast<uint8_t>(expired), 0);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(CacheEntry::VT_VALUE, value);
  }
  explicit CacheEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CacheEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CacheEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CacheEntry> CreateCacheEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    double time = 0.0,
    double ttl = 0.0,
    bool expired = false,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  CacheEntryBuilder builder_(_fbb);
  builder_.add_ttl(ttl);
  builder_.add_time(time);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_expired(expired);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CacheEntry> CreateCacheEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    double time = 0.0,
    double ttl = 0.0,
    bool expired = false,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return CreateCacheEntry(
      _fbb,
      key__,
      time,
      ttl,
      expired,
      value__);
}

inline const CacheEntry *GetCacheEntry(const void *buf) {
  return ::flatbuffers::GetRoot<CacheEntry>(buf);
}

inline const CacheEntry *GetSizePrefixedCacheEntry(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CacheEntry>(buf);
}

inline CacheEntry *GetMutableCacheEntry(void *buf) {
  return ::flatbuffers::GetMutableRoot<CacheEntry>(buf);
}

inline CacheEntry *GetMutableSizePrefixedCacheEntry(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<CacheEntry>(buf);
}

inline const char *CacheEntryIdentifier() {
  return "ns10";
}

inline bool CacheEntryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CacheEntryIdentifier());
}

inline bool SizePrefixedCacheEntryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CacheEntryIdentifier(), true);
}

inline bool VerifyCacheEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CacheEntry>(CacheEntryIdentifier());
}

inline bool VerifySizePrefixedCacheEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CacheEntry>(CacheEntryIdentifier());
}

inline void FinishCacheEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CacheEntry> root) {
  fbb.Finish(root, CacheEntryIdentifier());
}

inline void FinishSizePrefixedCacheEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CacheEntry> root) {
  fbb.FinishSizePrefixed(root, CacheEntryIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_NS10CACHEENTRY_H_
