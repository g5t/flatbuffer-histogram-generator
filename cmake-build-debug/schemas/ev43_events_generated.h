// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EV43EVENTS_H_
#define FLATBUFFERS_GENERATED_EV43EVENTS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Event43Message;
struct Event43MessageBuilder;

struct Event43Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Event43MessageBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Event43Message";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_NAME = 4,
    VT_MESSAGE_ID = 6,
    VT_PULSE_TIME = 8,
    VT_PULSE_INDEX = 10,
    VT_TIME_OF_FLIGHT = 12,
    VT_DETECTOR_ID = 14
  };
  const ::flatbuffers::String *source_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  ::flatbuffers::String *mutable_source_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  uint64_t message_id() const {
    return GetField<uint64_t>(VT_MESSAGE_ID, 0);
  }
  bool mutate_message_id(uint64_t _message_id = 0) {
    return SetField<uint64_t>(VT_MESSAGE_ID, _message_id, 0);
  }
  const ::flatbuffers::Vector<uint64_t> *pulse_time() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_PULSE_TIME);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_pulse_time() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_PULSE_TIME);
  }
  const ::flatbuffers::Vector<uint32_t> *pulse_index() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_PULSE_INDEX);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_pulse_index() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_PULSE_INDEX);
  }
  const ::flatbuffers::Vector<uint32_t> *time_of_flight() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_TIME_OF_FLIGHT);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_time_of_flight() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_TIME_OF_FLIGHT);
  }
  const ::flatbuffers::Vector<uint32_t> *detector_id() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_DETECTOR_ID);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_detector_id() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_DETECTOR_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCE_NAME) &&
           verifier.VerifyString(source_name()) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGE_ID, 8) &&
           VerifyOffset(verifier, VT_PULSE_TIME) &&
           verifier.VerifyVector(pulse_time()) &&
           VerifyOffset(verifier, VT_PULSE_INDEX) &&
           verifier.VerifyVector(pulse_index()) &&
           VerifyOffset(verifier, VT_TIME_OF_FLIGHT) &&
           verifier.VerifyVector(time_of_flight()) &&
           VerifyOffset(verifier, VT_DETECTOR_ID) &&
           verifier.VerifyVector(detector_id()) &&
           verifier.EndTable();
  }
};

struct Event43MessageBuilder {
  typedef Event43Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_name(::flatbuffers::Offset<::flatbuffers::String> source_name) {
    fbb_.AddOffset(Event43Message::VT_SOURCE_NAME, source_name);
  }
  void add_message_id(uint64_t message_id) {
    fbb_.AddElement<uint64_t>(Event43Message::VT_MESSAGE_ID, message_id, 0);
  }
  void add_pulse_time(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> pulse_time) {
    fbb_.AddOffset(Event43Message::VT_PULSE_TIME, pulse_time);
  }
  void add_pulse_index(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> pulse_index) {
    fbb_.AddOffset(Event43Message::VT_PULSE_INDEX, pulse_index);
  }
  void add_time_of_flight(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> time_of_flight) {
    fbb_.AddOffset(Event43Message::VT_TIME_OF_FLIGHT, time_of_flight);
  }
  void add_detector_id(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> detector_id) {
    fbb_.AddOffset(Event43Message::VT_DETECTOR_ID, detector_id);
  }
  explicit Event43MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Event43Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Event43Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Event43Message> CreateEvent43Message(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> source_name = 0,
    uint64_t message_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> pulse_time = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> pulse_index = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> time_of_flight = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> detector_id = 0) {
  Event43MessageBuilder builder_(_fbb);
  builder_.add_message_id(message_id);
  builder_.add_detector_id(detector_id);
  builder_.add_time_of_flight(time_of_flight);
  builder_.add_pulse_index(pulse_index);
  builder_.add_pulse_time(pulse_time);
  builder_.add_source_name(source_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Event43Message> CreateEvent43MessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *source_name = nullptr,
    uint64_t message_id = 0,
    const std::vector<uint64_t> *pulse_time = nullptr,
    const std::vector<uint32_t> *pulse_index = nullptr,
    const std::vector<uint32_t> *time_of_flight = nullptr,
    const std::vector<uint32_t> *detector_id = nullptr) {
  auto source_name__ = source_name ? _fbb.CreateString(source_name) : 0;
  auto pulse_time__ = pulse_time ? _fbb.CreateVector<uint64_t>(*pulse_time) : 0;
  auto pulse_index__ = pulse_index ? _fbb.CreateVector<uint32_t>(*pulse_index) : 0;
  auto time_of_flight__ = time_of_flight ? _fbb.CreateVector<uint32_t>(*time_of_flight) : 0;
  auto detector_id__ = detector_id ? _fbb.CreateVector<uint32_t>(*detector_id) : 0;
  return CreateEvent43Message(
      _fbb,
      source_name__,
      message_id,
      pulse_time__,
      pulse_index__,
      time_of_flight__,
      detector_id__);
}

inline const Event43Message *GetEvent43Message(const void *buf) {
  return ::flatbuffers::GetRoot<Event43Message>(buf);
}

inline const Event43Message *GetSizePrefixedEvent43Message(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Event43Message>(buf);
}

inline Event43Message *GetMutableEvent43Message(void *buf) {
  return ::flatbuffers::GetMutableRoot<Event43Message>(buf);
}

inline Event43Message *GetMutableSizePrefixedEvent43Message(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<Event43Message>(buf);
}

inline const char *Event43MessageIdentifier() {
  return "ev43";
}

inline bool Event43MessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Event43MessageIdentifier());
}

inline bool SizePrefixedEvent43MessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Event43MessageIdentifier(), true);
}

inline bool VerifyEvent43MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Event43Message>(Event43MessageIdentifier());
}

inline bool VerifySizePrefixedEvent43MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Event43Message>(Event43MessageIdentifier());
}

inline void FinishEvent43MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Event43Message> root) {
  fbb.Finish(root, Event43MessageIdentifier());
}

inline void FinishSizePrefixedEvent43MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Event43Message> root) {
  fbb.FinishSizePrefixed(root, Event43MessageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_EV43EVENTS_H_
