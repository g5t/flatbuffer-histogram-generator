// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EP00EPICSCONNECTIONINFO_H_
#define FLATBUFFERS_GENERATED_EP00EPICSCONNECTIONINFO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct EpicsConnectionInfo;
struct EpicsConnectionInfoBuilder;

enum class EventType : uint16_t {
  UNKNOWN = 0,
  NEVER_CONNECTED = 1,
  CONNECTED = 2,
  DISCONNECTED = 3,
  DESTROYED = 4,
  MIN = UNKNOWN,
  MAX = DESTROYED
};

inline const EventType (&EnumValuesEventType())[5] {
  static const EventType values[] = {
    EventType::UNKNOWN,
    EventType::NEVER_CONNECTED,
    EventType::CONNECTED,
    EventType::DISCONNECTED,
    EventType::DESTROYED
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[6] = {
    "UNKNOWN",
    "NEVER_CONNECTED",
    "CONNECTED",
    "DISCONNECTED",
    "DESTROYED",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType::UNKNOWN, EventType::DESTROYED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

struct EpicsConnectionInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EpicsConnectionInfoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "EpicsConnectionInfo";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_TYPE = 6,
    VT_SOURCE_NAME = 8,
    VT_SERVICE_ID = 10
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp = 0) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  EventType type() const {
    return static_cast<EventType>(GetField<uint16_t>(VT_TYPE, 0));
  }
  bool mutate_type(EventType _type = static_cast<EventType>(0)) {
    return SetField<uint16_t>(VT_TYPE, static_cast<uint16_t>(_type), 0);
  }
  const ::flatbuffers::String *source_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  ::flatbuffers::String *mutable_source_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  const ::flatbuffers::String *service_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_ID);
  }
  ::flatbuffers::String *mutable_service_id() {
    return GetPointer<::flatbuffers::String *>(VT_SERVICE_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<uint16_t>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_SOURCE_NAME) &&
           verifier.VerifyString(source_name()) &&
           VerifyOffset(verifier, VT_SERVICE_ID) &&
           verifier.VerifyString(service_id()) &&
           verifier.EndTable();
  }
};

struct EpicsConnectionInfoBuilder {
  typedef EpicsConnectionInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(EpicsConnectionInfo::VT_TIMESTAMP, timestamp, 0);
  }
  void add_type(EventType type) {
    fbb_.AddElement<uint16_t>(EpicsConnectionInfo::VT_TYPE, static_cast<uint16_t>(type), 0);
  }
  void add_source_name(::flatbuffers::Offset<::flatbuffers::String> source_name) {
    fbb_.AddOffset(EpicsConnectionInfo::VT_SOURCE_NAME, source_name);
  }
  void add_service_id(::flatbuffers::Offset<::flatbuffers::String> service_id) {
    fbb_.AddOffset(EpicsConnectionInfo::VT_SERVICE_ID, service_id);
  }
  explicit EpicsConnectionInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EpicsConnectionInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EpicsConnectionInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EpicsConnectionInfo> CreateEpicsConnectionInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    EventType type = EventType::UNKNOWN,
    ::flatbuffers::Offset<::flatbuffers::String> source_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> service_id = 0) {
  EpicsConnectionInfoBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_service_id(service_id);
  builder_.add_source_name(source_name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EpicsConnectionInfo> CreateEpicsConnectionInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    EventType type = EventType::UNKNOWN,
    const char *source_name = nullptr,
    const char *service_id = nullptr) {
  auto source_name__ = source_name ? _fbb.CreateString(source_name) : 0;
  auto service_id__ = service_id ? _fbb.CreateString(service_id) : 0;
  return CreateEpicsConnectionInfo(
      _fbb,
      timestamp,
      type,
      source_name__,
      service_id__);
}

inline const EpicsConnectionInfo *GetEpicsConnectionInfo(const void *buf) {
  return ::flatbuffers::GetRoot<EpicsConnectionInfo>(buf);
}

inline const EpicsConnectionInfo *GetSizePrefixedEpicsConnectionInfo(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EpicsConnectionInfo>(buf);
}

inline EpicsConnectionInfo *GetMutableEpicsConnectionInfo(void *buf) {
  return ::flatbuffers::GetMutableRoot<EpicsConnectionInfo>(buf);
}

inline EpicsConnectionInfo *GetMutableSizePrefixedEpicsConnectionInfo(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<EpicsConnectionInfo>(buf);
}

inline const char *EpicsConnectionInfoIdentifier() {
  return "ep00";
}

inline bool EpicsConnectionInfoBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EpicsConnectionInfoIdentifier());
}

inline bool SizePrefixedEpicsConnectionInfoBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EpicsConnectionInfoIdentifier(), true);
}

inline bool VerifyEpicsConnectionInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EpicsConnectionInfo>(EpicsConnectionInfoIdentifier());
}

inline bool VerifySizePrefixedEpicsConnectionInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EpicsConnectionInfo>(EpicsConnectionInfoIdentifier());
}

inline void FinishEpicsConnectionInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EpicsConnectionInfo> root) {
  fbb.Finish(root, EpicsConnectionInfoIdentifier());
}

inline void FinishSizePrefixedEpicsConnectionInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EpicsConnectionInfo> root) {
  fbb.FinishSizePrefixed(root, EpicsConnectionInfoIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_EP00EPICSCONNECTIONINFO_H_
