// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SE00DATA_H_
#define FLATBUFFERS_GENERATED_SE00DATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Int8Array;
struct Int8ArrayBuilder;

struct UInt8Array;
struct UInt8ArrayBuilder;

struct Int16Array;
struct Int16ArrayBuilder;

struct UInt16Array;
struct UInt16ArrayBuilder;

struct Int32Array;
struct Int32ArrayBuilder;

struct UInt32Array;
struct UInt32ArrayBuilder;

struct Int64Array;
struct Int64ArrayBuilder;

struct UInt64Array;
struct UInt64ArrayBuilder;

struct DoubleArray;
struct DoubleArrayBuilder;

struct FloatArray;
struct FloatArrayBuilder;

struct se00_SampleEnvironmentData;
struct se00_SampleEnvironmentDataBuilder;

enum class Location : int8_t {
  Unknown = 0,
  Start = 1,
  Middle = 2,
  End = 3,
  MIN = Unknown,
  MAX = End
};

inline const Location (&EnumValuesLocation())[4] {
  static const Location values[] = {
    Location::Unknown,
    Location::Start,
    Location::Middle,
    Location::End
  };
  return values;
}

inline const char * const *EnumNamesLocation() {
  static const char * const names[5] = {
    "Unknown",
    "Start",
    "Middle",
    "End",
    nullptr
  };
  return names;
}

inline const char *EnumNameLocation(Location e) {
  if (::flatbuffers::IsOutRange(e, Location::Unknown, Location::End)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLocation()[index];
}

enum class ValueUnion : uint8_t {
  NONE = 0,
  Int8Array = 1,
  UInt8Array = 2,
  Int16Array = 3,
  UInt16Array = 4,
  Int32Array = 5,
  UInt32Array = 6,
  Int64Array = 7,
  UInt64Array = 8,
  DoubleArray = 9,
  FloatArray = 10,
  MIN = NONE,
  MAX = FloatArray
};

inline const ValueUnion (&EnumValuesValueUnion())[11] {
  static const ValueUnion values[] = {
    ValueUnion::NONE,
    ValueUnion::Int8Array,
    ValueUnion::UInt8Array,
    ValueUnion::Int16Array,
    ValueUnion::UInt16Array,
    ValueUnion::Int32Array,
    ValueUnion::UInt32Array,
    ValueUnion::Int64Array,
    ValueUnion::UInt64Array,
    ValueUnion::DoubleArray,
    ValueUnion::FloatArray
  };
  return values;
}

inline const char * const *EnumNamesValueUnion() {
  static const char * const names[12] = {
    "NONE",
    "Int8Array",
    "UInt8Array",
    "Int16Array",
    "UInt16Array",
    "Int32Array",
    "UInt32Array",
    "Int64Array",
    "UInt64Array",
    "DoubleArray",
    "FloatArray",
    nullptr
  };
  return names;
}

inline const char *EnumNameValueUnion(ValueUnion e) {
  if (::flatbuffers::IsOutRange(e, ValueUnion::NONE, ValueUnion::FloatArray)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesValueUnion()[index];
}

template<typename T> struct ValueUnionTraits {
  static const ValueUnion enum_value = ValueUnion::NONE;
};

template<> struct ValueUnionTraits<Int8Array> {
  static const ValueUnion enum_value = ValueUnion::Int8Array;
};

template<> struct ValueUnionTraits<UInt8Array> {
  static const ValueUnion enum_value = ValueUnion::UInt8Array;
};

template<> struct ValueUnionTraits<Int16Array> {
  static const ValueUnion enum_value = ValueUnion::Int16Array;
};

template<> struct ValueUnionTraits<UInt16Array> {
  static const ValueUnion enum_value = ValueUnion::UInt16Array;
};

template<> struct ValueUnionTraits<Int32Array> {
  static const ValueUnion enum_value = ValueUnion::Int32Array;
};

template<> struct ValueUnionTraits<UInt32Array> {
  static const ValueUnion enum_value = ValueUnion::UInt32Array;
};

template<> struct ValueUnionTraits<Int64Array> {
  static const ValueUnion enum_value = ValueUnion::Int64Array;
};

template<> struct ValueUnionTraits<UInt64Array> {
  static const ValueUnion enum_value = ValueUnion::UInt64Array;
};

template<> struct ValueUnionTraits<DoubleArray> {
  static const ValueUnion enum_value = ValueUnion::DoubleArray;
};

template<> struct ValueUnionTraits<FloatArray> {
  static const ValueUnion enum_value = ValueUnion::FloatArray;
};

bool VerifyValueUnion(::flatbuffers::Verifier &verifier, const void *obj, ValueUnion type);
bool VerifyValueUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ValueUnion> *types);

struct Int8Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int8ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int8Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int8ArrayBuilder {
  typedef Int8Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(Int8Array::VT_VALUE, value);
  }
  explicit Int8ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int8Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int8Array>(end);
    fbb_.Required(o, Int8Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int8Array> CreateInt8Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value = 0) {
  Int8ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int8Array> CreateInt8ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int8_t>(*value) : 0;
  return CreateInt8Array(
      _fbb,
      value__);
}

struct UInt8Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt8ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt8Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt8ArrayBuilder {
  typedef UInt8Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(UInt8Array::VT_VALUE, value);
  }
  explicit UInt8ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt8Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt8Array>(end);
    fbb_.Required(o, UInt8Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt8Array> CreateUInt8Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  UInt8ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt8Array> CreateUInt8ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return CreateUInt8Array(
      _fbb,
      value__);
}

struct Int16Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int16ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int16Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int16ArrayBuilder {
  typedef Int16Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value) {
    fbb_.AddOffset(Int16Array::VT_VALUE, value);
  }
  explicit Int16ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int16Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int16Array>(end);
    fbb_.Required(o, Int16Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int16Array> CreateInt16Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value = 0) {
  Int16ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int16Array> CreateInt16ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int16_t>(*value) : 0;
  return CreateInt16Array(
      _fbb,
      value__);
}

struct UInt16Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt16ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt16Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt16ArrayBuilder {
  typedef UInt16Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value) {
    fbb_.AddOffset(UInt16Array::VT_VALUE, value);
  }
  explicit UInt16ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt16Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt16Array>(end);
    fbb_.Required(o, UInt16Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt16Array> CreateUInt16Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value = 0) {
  UInt16ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt16Array> CreateUInt16ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint16_t>(*value) : 0;
  return CreateUInt16Array(
      _fbb,
      value__);
}

struct Int32Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int32ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int32Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int32ArrayBuilder {
  typedef Int32Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value) {
    fbb_.AddOffset(Int32Array::VT_VALUE, value);
  }
  explicit Int32ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int32Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int32Array>(end);
    fbb_.Required(o, Int32Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int32Array> CreateInt32Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value = 0) {
  Int32ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int32Array> CreateInt32ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int32_t>(*value) : 0;
  return CreateInt32Array(
      _fbb,
      value__);
}

struct UInt32Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt32ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt32Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt32ArrayBuilder {
  typedef UInt32Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value) {
    fbb_.AddOffset(UInt32Array::VT_VALUE, value);
  }
  explicit UInt32ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt32Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt32Array>(end);
    fbb_.Required(o, UInt32Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt32Array> CreateUInt32Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value = 0) {
  UInt32ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt32Array> CreateUInt32ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint32_t>(*value) : 0;
  return CreateUInt32Array(
      _fbb,
      value__);
}

struct Int64Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int64ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int64Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int64ArrayBuilder {
  typedef Int64Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value) {
    fbb_.AddOffset(Int64Array::VT_VALUE, value);
  }
  explicit Int64ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int64Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int64Array>(end);
    fbb_.Required(o, Int64Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int64Array> CreateInt64Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value = 0) {
  Int64ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int64Array> CreateInt64ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int64_t>(*value) : 0;
  return CreateInt64Array(
      _fbb,
      value__);
}

struct UInt64Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt64ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt64Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt64ArrayBuilder {
  typedef UInt64Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value) {
    fbb_.AddOffset(UInt64Array::VT_VALUE, value);
  }
  explicit UInt64ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt64Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt64Array>(end);
    fbb_.Required(o, UInt64Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt64Array> CreateUInt64Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value = 0) {
  UInt64ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt64Array> CreateUInt64ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint64_t>(*value) : 0;
  return CreateUInt64Array(
      _fbb,
      value__);
}

struct DoubleArray FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DoubleArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DoubleArray";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<double> *value() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<double> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<double> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct DoubleArrayBuilder {
  typedef DoubleArray Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<double>> value) {
    fbb_.AddOffset(DoubleArray::VT_VALUE, value);
  }
  explicit DoubleArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DoubleArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DoubleArray>(end);
    fbb_.Required(o, DoubleArray::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<DoubleArray> CreateDoubleArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> value = 0) {
  DoubleArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DoubleArray> CreateDoubleArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<double>(*value) : 0;
  return CreateDoubleArray(
      _fbb,
      value__);
}

struct FloatArray FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "FloatArray";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<float> *value() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<float> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct FloatArrayBuilder {
  typedef FloatArray Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(FloatArray::VT_VALUE, value);
  }
  explicit FloatArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FloatArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloatArray>(end);
    fbb_.Required(o, FloatArray::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<FloatArray> CreateFloatArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> value = 0) {
  FloatArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FloatArray> CreateFloatArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<float>(*value) : 0;
  return CreateFloatArray(
      _fbb,
      value__);
}

struct se00_SampleEnvironmentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef se00_SampleEnvironmentDataBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "se00_SampleEnvironmentData";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_CHANNEL = 6,
    VT_PACKET_TIMESTAMP = 8,
    VT_TIME_DELTA = 10,
    VT_TIMESTAMP_LOCATION = 12,
    VT_VALUES_TYPE = 14,
    VT_VALUES = 16,
    VT_TIMESTAMPS = 18,
    VT_MESSAGE_COUNTER = 20
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  bool mutate_channel(int32_t _channel = 0) {
    return SetField<int32_t>(VT_CHANNEL, _channel, 0);
  }
  int64_t packet_timestamp() const {
    return GetField<int64_t>(VT_PACKET_TIMESTAMP, 0);
  }
  bool mutate_packet_timestamp(int64_t _packet_timestamp = 0) {
    return SetField<int64_t>(VT_PACKET_TIMESTAMP, _packet_timestamp, 0);
  }
  double time_delta() const {
    return GetField<double>(VT_TIME_DELTA, 0.0);
  }
  bool mutate_time_delta(double _time_delta = 0.0) {
    return SetField<double>(VT_TIME_DELTA, _time_delta, 0.0);
  }
  Location timestamp_location() const {
    return static_cast<Location>(GetField<int8_t>(VT_TIMESTAMP_LOCATION, 0));
  }
  bool mutate_timestamp_location(Location _timestamp_location = static_cast<Location>(0)) {
    return SetField<int8_t>(VT_TIMESTAMP_LOCATION, static_cast<int8_t>(_timestamp_location), 0);
  }
  ValueUnion values_type() const {
    return static_cast<ValueUnion>(GetField<uint8_t>(VT_VALUES_TYPE, 0));
  }
  const void *values() const {
    return GetPointer<const void *>(VT_VALUES);
  }
  template<typename T> const T *values_as() const;
  const Int8Array *values_as_Int8Array() const {
    return values_type() == ValueUnion::Int8Array ? static_cast<const Int8Array *>(values()) : nullptr;
  }
  const UInt8Array *values_as_UInt8Array() const {
    return values_type() == ValueUnion::UInt8Array ? static_cast<const UInt8Array *>(values()) : nullptr;
  }
  const Int16Array *values_as_Int16Array() const {
    return values_type() == ValueUnion::Int16Array ? static_cast<const Int16Array *>(values()) : nullptr;
  }
  const UInt16Array *values_as_UInt16Array() const {
    return values_type() == ValueUnion::UInt16Array ? static_cast<const UInt16Array *>(values()) : nullptr;
  }
  const Int32Array *values_as_Int32Array() const {
    return values_type() == ValueUnion::Int32Array ? static_cast<const Int32Array *>(values()) : nullptr;
  }
  const UInt32Array *values_as_UInt32Array() const {
    return values_type() == ValueUnion::UInt32Array ? static_cast<const UInt32Array *>(values()) : nullptr;
  }
  const Int64Array *values_as_Int64Array() const {
    return values_type() == ValueUnion::Int64Array ? static_cast<const Int64Array *>(values()) : nullptr;
  }
  const UInt64Array *values_as_UInt64Array() const {
    return values_type() == ValueUnion::UInt64Array ? static_cast<const UInt64Array *>(values()) : nullptr;
  }
  const DoubleArray *values_as_DoubleArray() const {
    return values_type() == ValueUnion::DoubleArray ? static_cast<const DoubleArray *>(values()) : nullptr;
  }
  const FloatArray *values_as_FloatArray() const {
    return values_type() == ValueUnion::FloatArray ? static_cast<const FloatArray *>(values()) : nullptr;
  }
  void *mutable_values() {
    return GetPointer<void *>(VT_VALUES);
  }
  const ::flatbuffers::Vector<int64_t> *timestamps() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_TIMESTAMPS);
  }
  ::flatbuffers::Vector<int64_t> *mutable_timestamps() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_TIMESTAMPS);
  }
  int64_t message_counter() const {
    return GetField<int64_t>(VT_MESSAGE_COUNTER, 0);
  }
  bool mutate_message_counter(int64_t _message_counter = 0) {
    return SetField<int64_t>(VT_MESSAGE_COUNTER, _message_counter, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL, 4) &&
           VerifyField<int64_t>(verifier, VT_PACKET_TIMESTAMP, 8) &&
           VerifyField<double>(verifier, VT_TIME_DELTA, 8) &&
           VerifyField<int8_t>(verifier, VT_TIMESTAMP_LOCATION, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALUES_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_VALUES) &&
           VerifyValueUnion(verifier, values(), values_type()) &&
           VerifyOffset(verifier, VT_TIMESTAMPS) &&
           verifier.VerifyVector(timestamps()) &&
           VerifyField<int64_t>(verifier, VT_MESSAGE_COUNTER, 8) &&
           verifier.EndTable();
  }
};

template<> inline const Int8Array *se00_SampleEnvironmentData::values_as<Int8Array>() const {
  return values_as_Int8Array();
}

template<> inline const UInt8Array *se00_SampleEnvironmentData::values_as<UInt8Array>() const {
  return values_as_UInt8Array();
}

template<> inline const Int16Array *se00_SampleEnvironmentData::values_as<Int16Array>() const {
  return values_as_Int16Array();
}

template<> inline const UInt16Array *se00_SampleEnvironmentData::values_as<UInt16Array>() const {
  return values_as_UInt16Array();
}

template<> inline const Int32Array *se00_SampleEnvironmentData::values_as<Int32Array>() const {
  return values_as_Int32Array();
}

template<> inline const UInt32Array *se00_SampleEnvironmentData::values_as<UInt32Array>() const {
  return values_as_UInt32Array();
}

template<> inline const Int64Array *se00_SampleEnvironmentData::values_as<Int64Array>() const {
  return values_as_Int64Array();
}

template<> inline const UInt64Array *se00_SampleEnvironmentData::values_as<UInt64Array>() const {
  return values_as_UInt64Array();
}

template<> inline const DoubleArray *se00_SampleEnvironmentData::values_as<DoubleArray>() const {
  return values_as_DoubleArray();
}

template<> inline const FloatArray *se00_SampleEnvironmentData::values_as<FloatArray>() const {
  return values_as_FloatArray();
}

struct se00_SampleEnvironmentDataBuilder {
  typedef se00_SampleEnvironmentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(se00_SampleEnvironmentData::VT_NAME, name);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(se00_SampleEnvironmentData::VT_CHANNEL, channel, 0);
  }
  void add_packet_timestamp(int64_t packet_timestamp) {
    fbb_.AddElement<int64_t>(se00_SampleEnvironmentData::VT_PACKET_TIMESTAMP, packet_timestamp, 0);
  }
  void add_time_delta(double time_delta) {
    fbb_.AddElement<double>(se00_SampleEnvironmentData::VT_TIME_DELTA, time_delta, 0.0);
  }
  void add_timestamp_location(Location timestamp_location) {
    fbb_.AddElement<int8_t>(se00_SampleEnvironmentData::VT_TIMESTAMP_LOCATION, static_cast<int8_t>(timestamp_location), 0);
  }
  void add_values_type(ValueUnion values_type) {
    fbb_.AddElement<uint8_t>(se00_SampleEnvironmentData::VT_VALUES_TYPE, static_cast<uint8_t>(values_type), 0);
  }
  void add_values(::flatbuffers::Offset<void> values) {
    fbb_.AddOffset(se00_SampleEnvironmentData::VT_VALUES, values);
  }
  void add_timestamps(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> timestamps) {
    fbb_.AddOffset(se00_SampleEnvironmentData::VT_TIMESTAMPS, timestamps);
  }
  void add_message_counter(int64_t message_counter) {
    fbb_.AddElement<int64_t>(se00_SampleEnvironmentData::VT_MESSAGE_COUNTER, message_counter, 0);
  }
  explicit se00_SampleEnvironmentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<se00_SampleEnvironmentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<se00_SampleEnvironmentData>(end);
    fbb_.Required(o, se00_SampleEnvironmentData::VT_NAME);
    fbb_.Required(o, se00_SampleEnvironmentData::VT_VALUES);
    return o;
  }
};

inline ::flatbuffers::Offset<se00_SampleEnvironmentData> Createse00_SampleEnvironmentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t channel = 0,
    int64_t packet_timestamp = 0,
    double time_delta = 0.0,
    Location timestamp_location = Location::Unknown,
    ValueUnion values_type = ValueUnion::NONE,
    ::flatbuffers::Offset<void> values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> timestamps = 0,
    int64_t message_counter = 0) {
  se00_SampleEnvironmentDataBuilder builder_(_fbb);
  builder_.add_message_counter(message_counter);
  builder_.add_time_delta(time_delta);
  builder_.add_packet_timestamp(packet_timestamp);
  builder_.add_timestamps(timestamps);
  builder_.add_values(values);
  builder_.add_channel(channel);
  builder_.add_name(name);
  builder_.add_values_type(values_type);
  builder_.add_timestamp_location(timestamp_location);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<se00_SampleEnvironmentData> Createse00_SampleEnvironmentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t channel = 0,
    int64_t packet_timestamp = 0,
    double time_delta = 0.0,
    Location timestamp_location = Location::Unknown,
    ValueUnion values_type = ValueUnion::NONE,
    ::flatbuffers::Offset<void> values = 0,
    const std::vector<int64_t> *timestamps = nullptr,
    int64_t message_counter = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto timestamps__ = timestamps ? _fbb.CreateVector<int64_t>(*timestamps) : 0;
  return Createse00_SampleEnvironmentData(
      _fbb,
      name__,
      channel,
      packet_timestamp,
      time_delta,
      timestamp_location,
      values_type,
      values,
      timestamps__,
      message_counter);
}

inline bool VerifyValueUnion(::flatbuffers::Verifier &verifier, const void *obj, ValueUnion type) {
  switch (type) {
    case ValueUnion::NONE: {
      return true;
    }
    case ValueUnion::Int8Array: {
      auto ptr = reinterpret_cast<const Int8Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt8Array: {
      auto ptr = reinterpret_cast<const UInt8Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int16Array: {
      auto ptr = reinterpret_cast<const Int16Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt16Array: {
      auto ptr = reinterpret_cast<const UInt16Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int32Array: {
      auto ptr = reinterpret_cast<const Int32Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt32Array: {
      auto ptr = reinterpret_cast<const UInt32Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int64Array: {
      auto ptr = reinterpret_cast<const Int64Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt64Array: {
      auto ptr = reinterpret_cast<const UInt64Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::DoubleArray: {
      auto ptr = reinterpret_cast<const DoubleArray *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::FloatArray: {
      auto ptr = reinterpret_cast<const FloatArray *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyValueUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ValueUnion> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyValueUnion(
        verifier,  values->Get(i), types->GetEnum<ValueUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const se00_SampleEnvironmentData *Getse00_SampleEnvironmentData(const void *buf) {
  return ::flatbuffers::GetRoot<se00_SampleEnvironmentData>(buf);
}

inline const se00_SampleEnvironmentData *GetSizePrefixedse00_SampleEnvironmentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<se00_SampleEnvironmentData>(buf);
}

inline se00_SampleEnvironmentData *GetMutablese00_SampleEnvironmentData(void *buf) {
  return ::flatbuffers::GetMutableRoot<se00_SampleEnvironmentData>(buf);
}

inline se00_SampleEnvironmentData *GetMutableSizePrefixedse00_SampleEnvironmentData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<se00_SampleEnvironmentData>(buf);
}

inline const char *se00_SampleEnvironmentDataIdentifier() {
  return "se00";
}

inline bool se00_SampleEnvironmentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, se00_SampleEnvironmentDataIdentifier());
}

inline bool SizePrefixedse00_SampleEnvironmentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, se00_SampleEnvironmentDataIdentifier(), true);
}

inline bool Verifyse00_SampleEnvironmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<se00_SampleEnvironmentData>(se00_SampleEnvironmentDataIdentifier());
}

inline bool VerifySizePrefixedse00_SampleEnvironmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<se00_SampleEnvironmentData>(se00_SampleEnvironmentDataIdentifier());
}

inline void Finishse00_SampleEnvironmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<se00_SampleEnvironmentData> root) {
  fbb.Finish(root, se00_SampleEnvironmentDataIdentifier());
}

inline void FinishSizePrefixedse00_SampleEnvironmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<se00_SampleEnvironmentData> root) {
  fbb.FinishSizePrefixed(root, se00_SampleEnvironmentDataIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_SE00DATA_H_
