// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JSONJSON_H_
#define FLATBUFFERS_GENERATED_JSONJSON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct JsonData;
struct JsonDataBuilder;

struct JsonData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JsonDataBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "JsonData";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JSON = 4
  };
  const ::flatbuffers::String *json() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JSON);
  }
  ::flatbuffers::String *mutable_json() {
    return GetPointer<::flatbuffers::String *>(VT_JSON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JSON) &&
           verifier.VerifyString(json()) &&
           verifier.EndTable();
  }
};

struct JsonDataBuilder {
  typedef JsonData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_json(::flatbuffers::Offset<::flatbuffers::String> json) {
    fbb_.AddOffset(JsonData::VT_JSON, json);
  }
  explicit JsonDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JsonData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JsonData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JsonData> CreateJsonData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> json = 0) {
  JsonDataBuilder builder_(_fbb);
  builder_.add_json(json);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<JsonData> CreateJsonDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *json = nullptr) {
  auto json__ = json ? _fbb.CreateString(json) : 0;
  return CreateJsonData(
      _fbb,
      json__);
}

inline const JsonData *GetJsonData(const void *buf) {
  return ::flatbuffers::GetRoot<JsonData>(buf);
}

inline const JsonData *GetSizePrefixedJsonData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<JsonData>(buf);
}

inline JsonData *GetMutableJsonData(void *buf) {
  return ::flatbuffers::GetMutableRoot<JsonData>(buf);
}

inline JsonData *GetMutableSizePrefixedJsonData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<JsonData>(buf);
}

inline const char *JsonDataIdentifier() {
  return "json";
}

inline bool JsonDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, JsonDataIdentifier());
}

inline bool SizePrefixedJsonDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, JsonDataIdentifier(), true);
}

inline bool VerifyJsonDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<JsonData>(JsonDataIdentifier());
}

inline bool VerifySizePrefixedJsonDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<JsonData>(JsonDataIdentifier());
}

inline void FinishJsonDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JsonData> root) {
  fbb.Finish(root, JsonDataIdentifier());
}

inline void FinishSizePrefixedJsonDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JsonData> root) {
  fbb.FinishSizePrefixed(root, JsonDataIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_JSONJSON_H_
