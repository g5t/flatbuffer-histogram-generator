// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PL72RUNSTART_H_
#define FLATBUFFERS_GENERATED_PL72RUNSTART_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "df12_det_spec_map_generated.h"

struct RunStart;
struct RunStartBuilder;

struct RunStart FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RunStartBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "RunStart";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START_TIME = 4,
    VT_STOP_TIME = 6,
    VT_RUN_NAME = 8,
    VT_INSTRUMENT_NAME = 10,
    VT_NEXUS_STRUCTURE = 12,
    VT_JOB_ID = 14,
    VT_BROKER = 16,
    VT_SERVICE_ID = 18,
    VT_FILENAME = 20,
    VT_N_PERIODS = 22,
    VT_DETECTOR_SPECTRUM_MAP = 24,
    VT_METADATA = 26,
    VT_CONTROL_TOPIC = 28
  };
  uint64_t start_time() const {
    return GetField<uint64_t>(VT_START_TIME, 0);
  }
  bool mutate_start_time(uint64_t _start_time = 0) {
    return SetField<uint64_t>(VT_START_TIME, _start_time, 0);
  }
  uint64_t stop_time() const {
    return GetField<uint64_t>(VT_STOP_TIME, 0);
  }
  bool mutate_stop_time(uint64_t _stop_time = 0) {
    return SetField<uint64_t>(VT_STOP_TIME, _stop_time, 0);
  }
  const ::flatbuffers::String *run_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RUN_NAME);
  }
  ::flatbuffers::String *mutable_run_name() {
    return GetPointer<::flatbuffers::String *>(VT_RUN_NAME);
  }
  const ::flatbuffers::String *instrument_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT_NAME);
  }
  ::flatbuffers::String *mutable_instrument_name() {
    return GetPointer<::flatbuffers::String *>(VT_INSTRUMENT_NAME);
  }
  const ::flatbuffers::String *nexus_structure() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NEXUS_STRUCTURE);
  }
  ::flatbuffers::String *mutable_nexus_structure() {
    return GetPointer<::flatbuffers::String *>(VT_NEXUS_STRUCTURE);
  }
  const ::flatbuffers::String *job_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOB_ID);
  }
  ::flatbuffers::String *mutable_job_id() {
    return GetPointer<::flatbuffers::String *>(VT_JOB_ID);
  }
  const ::flatbuffers::String *broker() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BROKER);
  }
  ::flatbuffers::String *mutable_broker() {
    return GetPointer<::flatbuffers::String *>(VT_BROKER);
  }
  const ::flatbuffers::String *service_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_ID);
  }
  ::flatbuffers::String *mutable_service_id() {
    return GetPointer<::flatbuffers::String *>(VT_SERVICE_ID);
  }
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  ::flatbuffers::String *mutable_filename() {
    return GetPointer<::flatbuffers::String *>(VT_FILENAME);
  }
  uint32_t n_periods() const {
    return GetField<uint32_t>(VT_N_PERIODS, 1);
  }
  bool mutate_n_periods(uint32_t _n_periods = 1) {
    return SetField<uint32_t>(VT_N_PERIODS, _n_periods, 1);
  }
  const SpectraDetectorMapping *detector_spectrum_map() const {
    return GetPointer<const SpectraDetectorMapping *>(VT_DETECTOR_SPECTRUM_MAP);
  }
  SpectraDetectorMapping *mutable_detector_spectrum_map() {
    return GetPointer<SpectraDetectorMapping *>(VT_DETECTOR_SPECTRUM_MAP);
  }
  const ::flatbuffers::String *metadata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METADATA);
  }
  ::flatbuffers::String *mutable_metadata() {
    return GetPointer<::flatbuffers::String *>(VT_METADATA);
  }
  const ::flatbuffers::String *control_topic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTROL_TOPIC);
  }
  ::flatbuffers::String *mutable_control_topic() {
    return GetPointer<::flatbuffers::String *>(VT_CONTROL_TOPIC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_START_TIME, 8) &&
           VerifyField<uint64_t>(verifier, VT_STOP_TIME, 8) &&
           VerifyOffset(verifier, VT_RUN_NAME) &&
           verifier.VerifyString(run_name()) &&
           VerifyOffset(verifier, VT_INSTRUMENT_NAME) &&
           verifier.VerifyString(instrument_name()) &&
           VerifyOffset(verifier, VT_NEXUS_STRUCTURE) &&
           verifier.VerifyString(nexus_structure()) &&
           VerifyOffset(verifier, VT_JOB_ID) &&
           verifier.VerifyString(job_id()) &&
           VerifyOffset(verifier, VT_BROKER) &&
           verifier.VerifyString(broker()) &&
           VerifyOffset(verifier, VT_SERVICE_ID) &&
           verifier.VerifyString(service_id()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<uint32_t>(verifier, VT_N_PERIODS, 4) &&
           VerifyOffset(verifier, VT_DETECTOR_SPECTRUM_MAP) &&
           verifier.VerifyTable(detector_spectrum_map()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           VerifyOffset(verifier, VT_CONTROL_TOPIC) &&
           verifier.VerifyString(control_topic()) &&
           verifier.EndTable();
  }
};

struct RunStartBuilder {
  typedef RunStart Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_start_time(uint64_t start_time) {
    fbb_.AddElement<uint64_t>(RunStart::VT_START_TIME, start_time, 0);
  }
  void add_stop_time(uint64_t stop_time) {
    fbb_.AddElement<uint64_t>(RunStart::VT_STOP_TIME, stop_time, 0);
  }
  void add_run_name(::flatbuffers::Offset<::flatbuffers::String> run_name) {
    fbb_.AddOffset(RunStart::VT_RUN_NAME, run_name);
  }
  void add_instrument_name(::flatbuffers::Offset<::flatbuffers::String> instrument_name) {
    fbb_.AddOffset(RunStart::VT_INSTRUMENT_NAME, instrument_name);
  }
  void add_nexus_structure(::flatbuffers::Offset<::flatbuffers::String> nexus_structure) {
    fbb_.AddOffset(RunStart::VT_NEXUS_STRUCTURE, nexus_structure);
  }
  void add_job_id(::flatbuffers::Offset<::flatbuffers::String> job_id) {
    fbb_.AddOffset(RunStart::VT_JOB_ID, job_id);
  }
  void add_broker(::flatbuffers::Offset<::flatbuffers::String> broker) {
    fbb_.AddOffset(RunStart::VT_BROKER, broker);
  }
  void add_service_id(::flatbuffers::Offset<::flatbuffers::String> service_id) {
    fbb_.AddOffset(RunStart::VT_SERVICE_ID, service_id);
  }
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(RunStart::VT_FILENAME, filename);
  }
  void add_n_periods(uint32_t n_periods) {
    fbb_.AddElement<uint32_t>(RunStart::VT_N_PERIODS, n_periods, 1);
  }
  void add_detector_spectrum_map(::flatbuffers::Offset<SpectraDetectorMapping> detector_spectrum_map) {
    fbb_.AddOffset(RunStart::VT_DETECTOR_SPECTRUM_MAP, detector_spectrum_map);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::String> metadata) {
    fbb_.AddOffset(RunStart::VT_METADATA, metadata);
  }
  void add_control_topic(::flatbuffers::Offset<::flatbuffers::String> control_topic) {
    fbb_.AddOffset(RunStart::VT_CONTROL_TOPIC, control_topic);
  }
  explicit RunStartBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RunStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RunStart>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RunStart> CreateRunStart(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t start_time = 0,
    uint64_t stop_time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> run_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrument_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nexus_structure = 0,
    ::flatbuffers::Offset<::flatbuffers::String> job_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> broker = 0,
    ::flatbuffers::Offset<::flatbuffers::String> service_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    uint32_t n_periods = 1,
    ::flatbuffers::Offset<SpectraDetectorMapping> detector_spectrum_map = 0,
    ::flatbuffers::Offset<::flatbuffers::String> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> control_topic = 0) {
  RunStartBuilder builder_(_fbb);
  builder_.add_stop_time(stop_time);
  builder_.add_start_time(start_time);
  builder_.add_control_topic(control_topic);
  builder_.add_metadata(metadata);
  builder_.add_detector_spectrum_map(detector_spectrum_map);
  builder_.add_n_periods(n_periods);
  builder_.add_filename(filename);
  builder_.add_service_id(service_id);
  builder_.add_broker(broker);
  builder_.add_job_id(job_id);
  builder_.add_nexus_structure(nexus_structure);
  builder_.add_instrument_name(instrument_name);
  builder_.add_run_name(run_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RunStart> CreateRunStartDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t start_time = 0,
    uint64_t stop_time = 0,
    const char *run_name = nullptr,
    const char *instrument_name = nullptr,
    const char *nexus_structure = nullptr,
    const char *job_id = nullptr,
    const char *broker = nullptr,
    const char *service_id = nullptr,
    const char *filename = nullptr,
    uint32_t n_periods = 1,
    ::flatbuffers::Offset<SpectraDetectorMapping> detector_spectrum_map = 0,
    const char *metadata = nullptr,
    const char *control_topic = nullptr) {
  auto run_name__ = run_name ? _fbb.CreateString(run_name) : 0;
  auto instrument_name__ = instrument_name ? _fbb.CreateString(instrument_name) : 0;
  auto nexus_structure__ = nexus_structure ? _fbb.CreateString(nexus_structure) : 0;
  auto job_id__ = job_id ? _fbb.CreateString(job_id) : 0;
  auto broker__ = broker ? _fbb.CreateString(broker) : 0;
  auto service_id__ = service_id ? _fbb.CreateString(service_id) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  auto control_topic__ = control_topic ? _fbb.CreateString(control_topic) : 0;
  return CreateRunStart(
      _fbb,
      start_time,
      stop_time,
      run_name__,
      instrument_name__,
      nexus_structure__,
      job_id__,
      broker__,
      service_id__,
      filename__,
      n_periods,
      detector_spectrum_map,
      metadata__,
      control_topic__);
}

inline const RunStart *GetRunStart(const void *buf) {
  return ::flatbuffers::GetRoot<RunStart>(buf);
}

inline const RunStart *GetSizePrefixedRunStart(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RunStart>(buf);
}

inline RunStart *GetMutableRunStart(void *buf) {
  return ::flatbuffers::GetMutableRoot<RunStart>(buf);
}

inline RunStart *GetMutableSizePrefixedRunStart(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<RunStart>(buf);
}

inline const char *RunStartIdentifier() {
  return "pl72";
}

inline bool RunStartBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RunStartIdentifier());
}

inline bool SizePrefixedRunStartBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RunStartIdentifier(), true);
}

inline bool VerifyRunStartBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RunStart>(RunStartIdentifier());
}

inline bool VerifySizePrefixedRunStartBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RunStart>(RunStartIdentifier());
}

inline void FinishRunStartBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RunStart> root) {
  fbb.Finish(root, RunStartIdentifier());
}

inline void FinishSizePrefixedRunStartBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RunStart> root) {
  fbb.FinishSizePrefixed(root, RunStartIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_PL72RUNSTART_H_
