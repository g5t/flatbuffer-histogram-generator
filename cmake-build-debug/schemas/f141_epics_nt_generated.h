// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_
#define FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace BrightnESS {
namespace FlatBufs {
namespace f141_epics_nt {

struct timeStamp_t;

struct NTScalarByte;
struct NTScalarByteBuilder;

struct NTScalarUByte;
struct NTScalarUByteBuilder;

struct NTScalarShort;
struct NTScalarShortBuilder;

struct NTScalarUShort;
struct NTScalarUShortBuilder;

struct NTScalarInt;
struct NTScalarIntBuilder;

struct NTScalarUInt;
struct NTScalarUIntBuilder;

struct NTScalarLong;
struct NTScalarLongBuilder;

struct NTScalarULong;
struct NTScalarULongBuilder;

struct NTScalarFloat;
struct NTScalarFloatBuilder;

struct NTScalarDouble;
struct NTScalarDoubleBuilder;

struct NTScalarArrayByte;
struct NTScalarArrayByteBuilder;

struct NTScalarArrayUByte;
struct NTScalarArrayUByteBuilder;

struct NTScalarArrayShort;
struct NTScalarArrayShortBuilder;

struct NTScalarArrayUShort;
struct NTScalarArrayUShortBuilder;

struct NTScalarArrayInt;
struct NTScalarArrayIntBuilder;

struct NTScalarArrayUInt;
struct NTScalarArrayUIntBuilder;

struct NTScalarArrayLong;
struct NTScalarArrayLongBuilder;

struct NTScalarArrayULong;
struct NTScalarArrayULongBuilder;

struct NTScalarArrayFloat;
struct NTScalarArrayFloatBuilder;

struct NTScalarArrayDouble;
struct NTScalarArrayDoubleBuilder;

struct fwdinfo_t;

struct fwdinfo_2_t;
struct fwdinfo_2_tBuilder;

struct EpicsPV;
struct EpicsPVBuilder;

enum class PV : uint8_t {
  NONE = 0,
  NTScalarByte = 1,
  NTScalarUByte = 2,
  NTScalarShort = 3,
  NTScalarUShort = 4,
  NTScalarInt = 5,
  NTScalarUInt = 6,
  NTScalarLong = 7,
  NTScalarULong = 8,
  NTScalarFloat = 9,
  NTScalarDouble = 10,
  NTScalarArrayByte = 11,
  NTScalarArrayUByte = 12,
  NTScalarArrayShort = 13,
  NTScalarArrayUShort = 14,
  NTScalarArrayInt = 15,
  NTScalarArrayUInt = 16,
  NTScalarArrayLong = 17,
  NTScalarArrayULong = 18,
  NTScalarArrayFloat = 19,
  NTScalarArrayDouble = 20,
  MIN = NONE,
  MAX = NTScalarArrayDouble
};

inline const PV (&EnumValuesPV())[21] {
  static const PV values[] = {
    PV::NONE,
    PV::NTScalarByte,
    PV::NTScalarUByte,
    PV::NTScalarShort,
    PV::NTScalarUShort,
    PV::NTScalarInt,
    PV::NTScalarUInt,
    PV::NTScalarLong,
    PV::NTScalarULong,
    PV::NTScalarFloat,
    PV::NTScalarDouble,
    PV::NTScalarArrayByte,
    PV::NTScalarArrayUByte,
    PV::NTScalarArrayShort,
    PV::NTScalarArrayUShort,
    PV::NTScalarArrayInt,
    PV::NTScalarArrayUInt,
    PV::NTScalarArrayLong,
    PV::NTScalarArrayULong,
    PV::NTScalarArrayFloat,
    PV::NTScalarArrayDouble
  };
  return values;
}

inline const char * const *EnumNamesPV() {
  static const char * const names[22] = {
    "NONE",
    "NTScalarByte",
    "NTScalarUByte",
    "NTScalarShort",
    "NTScalarUShort",
    "NTScalarInt",
    "NTScalarUInt",
    "NTScalarLong",
    "NTScalarULong",
    "NTScalarFloat",
    "NTScalarDouble",
    "NTScalarArrayByte",
    "NTScalarArrayUByte",
    "NTScalarArrayShort",
    "NTScalarArrayUShort",
    "NTScalarArrayInt",
    "NTScalarArrayUInt",
    "NTScalarArrayLong",
    "NTScalarArrayULong",
    "NTScalarArrayFloat",
    "NTScalarArrayDouble",
    nullptr
  };
  return names;
}

inline const char *EnumNamePV(PV e) {
  if (::flatbuffers::IsOutRange(e, PV::NONE, PV::NTScalarArrayDouble)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPV()[index];
}

template<typename T> struct PVTraits {
  static const PV enum_value = PV::NONE;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte> {
  static const PV enum_value = PV::NTScalarByte;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte> {
  static const PV enum_value = PV::NTScalarUByte;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort> {
  static const PV enum_value = PV::NTScalarShort;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort> {
  static const PV enum_value = PV::NTScalarUShort;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt> {
  static const PV enum_value = PV::NTScalarInt;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt> {
  static const PV enum_value = PV::NTScalarUInt;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong> {
  static const PV enum_value = PV::NTScalarLong;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong> {
  static const PV enum_value = PV::NTScalarULong;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat> {
  static const PV enum_value = PV::NTScalarFloat;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble> {
  static const PV enum_value = PV::NTScalarDouble;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte> {
  static const PV enum_value = PV::NTScalarArrayByte;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte> {
  static const PV enum_value = PV::NTScalarArrayUByte;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort> {
  static const PV enum_value = PV::NTScalarArrayShort;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort> {
  static const PV enum_value = PV::NTScalarArrayUShort;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt> {
  static const PV enum_value = PV::NTScalarArrayInt;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt> {
  static const PV enum_value = PV::NTScalarArrayUInt;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong> {
  static const PV enum_value = PV::NTScalarArrayLong;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong> {
  static const PV enum_value = PV::NTScalarArrayULong;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat> {
  static const PV enum_value = PV::NTScalarArrayFloat;
};

template<> struct PVTraits<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble> {
  static const PV enum_value = PV::NTScalarArrayDouble;
};

bool VerifyPV(::flatbuffers::Verifier &verifier, const void *obj, PV type);
bool VerifyPVVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<PV> *types);

enum class fwdinfo_u : uint8_t {
  NONE = 0,
  fwdinfo_2_t = 1,
  MIN = NONE,
  MAX = fwdinfo_2_t
};

inline const fwdinfo_u (&EnumValuesfwdinfo_u())[2] {
  static const fwdinfo_u values[] = {
    fwdinfo_u::NONE,
    fwdinfo_u::fwdinfo_2_t
  };
  return values;
}

inline const char * const *EnumNamesfwdinfo_u() {
  static const char * const names[3] = {
    "NONE",
    "fwdinfo_2_t",
    nullptr
  };
  return names;
}

inline const char *EnumNamefwdinfo_u(fwdinfo_u e) {
  if (::flatbuffers::IsOutRange(e, fwdinfo_u::NONE, fwdinfo_u::fwdinfo_2_t)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesfwdinfo_u()[index];
}

template<typename T> struct fwdinfo_uTraits {
  static const fwdinfo_u enum_value = fwdinfo_u::NONE;
};

template<> struct fwdinfo_uTraits<BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t> {
  static const fwdinfo_u enum_value = fwdinfo_u::fwdinfo_2_t;
};

bool Verifyfwdinfo_u(::flatbuffers::Verifier &verifier, const void *obj, fwdinfo_u type);
bool Verifyfwdinfo_uVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<fwdinfo_u> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) timeStamp_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t secondsPastEpoch_;
  int32_t nanoseconds_;
  int32_t padding0__;

 public:
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.timeStamp_t";
  }
  timeStamp_t()
      : secondsPastEpoch_(0),
        nanoseconds_(0),
        padding0__(0) {
    (void)padding0__;
  }
  timeStamp_t(uint64_t _secondsPastEpoch, int32_t _nanoseconds)
      : secondsPastEpoch_(::flatbuffers::EndianScalar(_secondsPastEpoch)),
        nanoseconds_(::flatbuffers::EndianScalar(_nanoseconds)),
        padding0__(0) {
    (void)padding0__;
  }
  uint64_t secondsPastEpoch() const {
    return ::flatbuffers::EndianScalar(secondsPastEpoch_);
  }
  void mutate_secondsPastEpoch(uint64_t _secondsPastEpoch) {
    ::flatbuffers::WriteScalar(&secondsPastEpoch_, _secondsPastEpoch);
  }
  int32_t nanoseconds() const {
    return ::flatbuffers::EndianScalar(nanoseconds_);
  }
  void mutate_nanoseconds(int32_t _nanoseconds) {
    ::flatbuffers::WriteScalar(&nanoseconds_, _nanoseconds);
  }
};
FLATBUFFERS_STRUCT_END(timeStamp_t, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) fwdinfo_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t seq_;
  uint64_t ts_data_;
  uint64_t ts_fwd_;
  uint8_t fwdix_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;
  uint64_t teamid_;

 public:
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.fwdinfo_t";
  }
  fwdinfo_t()
      : seq_(0),
        ts_data_(0),
        ts_fwd_(0),
        fwdix_(0),
        padding0__(0),
        padding1__(0),
        padding2__(0),
        teamid_(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  fwdinfo_t(uint64_t _seq, uint64_t _ts_data, uint64_t _ts_fwd, uint8_t _fwdix, uint64_t _teamid)
      : seq_(::flatbuffers::EndianScalar(_seq)),
        ts_data_(::flatbuffers::EndianScalar(_ts_data)),
        ts_fwd_(::flatbuffers::EndianScalar(_ts_fwd)),
        fwdix_(::flatbuffers::EndianScalar(_fwdix)),
        padding0__(0),
        padding1__(0),
        padding2__(0),
        teamid_(::flatbuffers::EndianScalar(_teamid)) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint64_t seq() const {
    return ::flatbuffers::EndianScalar(seq_);
  }
  void mutate_seq(uint64_t _seq) {
    ::flatbuffers::WriteScalar(&seq_, _seq);
  }
  uint64_t ts_data() const {
    return ::flatbuffers::EndianScalar(ts_data_);
  }
  void mutate_ts_data(uint64_t _ts_data) {
    ::flatbuffers::WriteScalar(&ts_data_, _ts_data);
  }
  uint64_t ts_fwd() const {
    return ::flatbuffers::EndianScalar(ts_fwd_);
  }
  void mutate_ts_fwd(uint64_t _ts_fwd) {
    ::flatbuffers::WriteScalar(&ts_fwd_, _ts_fwd);
  }
  uint8_t fwdix() const {
    return ::flatbuffers::EndianScalar(fwdix_);
  }
  void mutate_fwdix(uint8_t _fwdix) {
    ::flatbuffers::WriteScalar(&fwdix_, _fwdix);
  }
  uint64_t teamid() const {
    return ::flatbuffers::EndianScalar(teamid_);
  }
  void mutate_teamid(uint64_t _teamid) {
    ::flatbuffers::WriteScalar(&teamid_, _teamid);
  }
};
FLATBUFFERS_STRUCT_END(fwdinfo_t, 40);

struct NTScalarByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool mutate_value(int8_t _value = 0) {
    return SetField<int8_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct NTScalarByteBuilder {
  typedef NTScalarByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(NTScalarByte::VT_VALUE, value, 0);
  }
  explicit NTScalarByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarByte> CreateNTScalarByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t value = 0) {
  NTScalarByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarUByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarUByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool mutate_value(uint8_t _value = 0) {
    return SetField<uint8_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct NTScalarUByteBuilder {
  typedef NTScalarUByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(NTScalarUByte::VT_VALUE, value, 0);
  }
  explicit NTScalarUByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarUByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarUByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarUByte> CreateNTScalarUByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  NTScalarUByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int16_t value() const {
    return GetField<int16_t>(VT_VALUE, 0);
  }
  bool mutate_value(int16_t _value = 0) {
    return SetField<int16_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct NTScalarShortBuilder {
  typedef NTScalarShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int16_t value) {
    fbb_.AddElement<int16_t>(NTScalarShort::VT_VALUE, value, 0);
  }
  explicit NTScalarShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarShort> CreateNTScalarShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t value = 0) {
  NTScalarShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarUShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarUShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint16_t value() const {
    return GetField<uint16_t>(VT_VALUE, 0);
  }
  bool mutate_value(uint16_t _value = 0) {
    return SetField<uint16_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_VALUE, 2) &&
           verifier.EndTable();
  }
};

struct NTScalarUShortBuilder {
  typedef NTScalarUShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint16_t value) {
    fbb_.AddElement<uint16_t>(NTScalarUShort::VT_VALUE, value, 0);
  }
  explicit NTScalarUShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarUShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarUShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarUShort> CreateNTScalarUShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t value = 0) {
  NTScalarUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool mutate_value(int32_t _value = 0) {
    return SetField<int32_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct NTScalarIntBuilder {
  typedef NTScalarInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(NTScalarInt::VT_VALUE, value, 0);
  }
  explicit NTScalarIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarInt> CreateNTScalarInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  NTScalarIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarUInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarUIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarUInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool mutate_value(uint32_t _value = 0) {
    return SetField<uint32_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct NTScalarUIntBuilder {
  typedef NTScalarUInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(NTScalarUInt::VT_VALUE, value, 0);
  }
  explicit NTScalarUIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarUInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarUInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarUInt> CreateNTScalarUInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  NTScalarUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarLong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarLongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarLong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool mutate_value(int64_t _value = 0) {
    return SetField<int64_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct NTScalarLongBuilder {
  typedef NTScalarLong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(NTScalarLong::VT_VALUE, value, 0);
  }
  explicit NTScalarLongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarLong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarLong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarLong> CreateNTScalarLong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  NTScalarLongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarULong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarULongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarULong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint64_t value() const {
    return GetField<uint64_t>(VT_VALUE, 0);
  }
  bool mutate_value(uint64_t _value = 0) {
    return SetField<uint64_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct NTScalarULongBuilder {
  typedef NTScalarULong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) {
    fbb_.AddElement<uint64_t>(NTScalarULong::VT_VALUE, value, 0);
  }
  explicit NTScalarULongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarULong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarULong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarULong> CreateNTScalarULong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t value = 0) {
  NTScalarULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarFloat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarFloatBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarFloat";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool mutate_value(float _value = 0.0f) {
    return SetField<float>(VT_VALUE, _value, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct NTScalarFloatBuilder {
  typedef NTScalarFloat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(NTScalarFloat::VT_VALUE, value, 0.0f);
  }
  explicit NTScalarFloatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarFloat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarFloat> CreateNTScalarFloat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  NTScalarFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarDouble FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarDoubleBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarDouble";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool mutate_value(double _value = 0.0) {
    return SetField<double>(VT_VALUE, _value, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct NTScalarDoubleBuilder {
  typedef NTScalarDouble Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(NTScalarDouble::VT_VALUE, value, 0.0);
  }
  explicit NTScalarDoubleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarDouble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarDouble>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarDouble> CreateNTScalarDouble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  NTScalarDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct NTScalarArrayByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayByteBuilder {
  typedef NTScalarArrayByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(NTScalarArrayByte::VT_VALUE, value);
  }
  explicit NTScalarArrayByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayByte> CreateNTScalarArrayByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value = 0) {
  NTScalarArrayByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayByte> CreateNTScalarArrayByteDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int8_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayByte(
      _fbb,
      value__);
}

struct NTScalarArrayUByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayUByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayUByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUByteBuilder {
  typedef NTScalarArrayUByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(NTScalarArrayUByte::VT_VALUE, value);
  }
  explicit NTScalarArrayUByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayUByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayUByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayUByte> CreateNTScalarArrayUByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  NTScalarArrayUByteBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayUByte> CreateNTScalarArrayUByteDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayUByte(
      _fbb,
      value__);
}

struct NTScalarArrayShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayShortBuilder {
  typedef NTScalarArrayShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value) {
    fbb_.AddOffset(NTScalarArrayShort::VT_VALUE, value);
  }
  explicit NTScalarArrayShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayShort> CreateNTScalarArrayShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value = 0) {
  NTScalarArrayShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayShort> CreateNTScalarArrayShortDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int16_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayShort(
      _fbb,
      value__);
}

struct NTScalarArrayUShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayUShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayUShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUShortBuilder {
  typedef NTScalarArrayUShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value) {
    fbb_.AddOffset(NTScalarArrayUShort::VT_VALUE, value);
  }
  explicit NTScalarArrayUShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayUShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayUShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayUShort> CreateNTScalarArrayUShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value = 0) {
  NTScalarArrayUShortBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayUShort> CreateNTScalarArrayUShortDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint16_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayUShort(
      _fbb,
      value__);
}

struct NTScalarArrayInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayIntBuilder {
  typedef NTScalarArrayInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value) {
    fbb_.AddOffset(NTScalarArrayInt::VT_VALUE, value);
  }
  explicit NTScalarArrayIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayInt> CreateNTScalarArrayInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value = 0) {
  NTScalarArrayIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayInt> CreateNTScalarArrayIntDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int32_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayInt(
      _fbb,
      value__);
}

struct NTScalarArrayUInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayUIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayUInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayUIntBuilder {
  typedef NTScalarArrayUInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value) {
    fbb_.AddOffset(NTScalarArrayUInt::VT_VALUE, value);
  }
  explicit NTScalarArrayUIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayUInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayUInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayUInt> CreateNTScalarArrayUInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value = 0) {
  NTScalarArrayUIntBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayUInt> CreateNTScalarArrayUIntDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint32_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayUInt(
      _fbb,
      value__);
}

struct NTScalarArrayLong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayLongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayLong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayLongBuilder {
  typedef NTScalarArrayLong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value) {
    fbb_.AddOffset(NTScalarArrayLong::VT_VALUE, value);
  }
  explicit NTScalarArrayLongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayLong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayLong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayLong> CreateNTScalarArrayLong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value = 0) {
  NTScalarArrayLongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayLong> CreateNTScalarArrayLongDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int64_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayLong(
      _fbb,
      value__);
}

struct NTScalarArrayULong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayULongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayULong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayULongBuilder {
  typedef NTScalarArrayULong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value) {
    fbb_.AddOffset(NTScalarArrayULong::VT_VALUE, value);
  }
  explicit NTScalarArrayULongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayULong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayULong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayULong> CreateNTScalarArrayULong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value = 0) {
  NTScalarArrayULongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayULong> CreateNTScalarArrayULongDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint64_t>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayULong(
      _fbb,
      value__);
}

struct NTScalarArrayFloat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayFloatBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayFloat";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<float> *value() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<float> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayFloatBuilder {
  typedef NTScalarArrayFloat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(NTScalarArrayFloat::VT_VALUE, value);
  }
  explicit NTScalarArrayFloatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayFloat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayFloat> CreateNTScalarArrayFloat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> value = 0) {
  NTScalarArrayFloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayFloat> CreateNTScalarArrayFloatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<float>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayFloat(
      _fbb,
      value__);
}

struct NTScalarArrayDouble FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NTScalarArrayDoubleBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.NTScalarArrayDouble";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<double> *value() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<double> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<double> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct NTScalarArrayDoubleBuilder {
  typedef NTScalarArrayDouble Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<double>> value) {
    fbb_.AddOffset(NTScalarArrayDouble::VT_VALUE, value);
  }
  explicit NTScalarArrayDoubleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NTScalarArrayDouble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NTScalarArrayDouble>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NTScalarArrayDouble> CreateNTScalarArrayDouble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> value = 0) {
  NTScalarArrayDoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NTScalarArrayDouble> CreateNTScalarArrayDoubleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<double>(*value) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateNTScalarArrayDouble(
      _fbb,
      value__);
}

struct fwdinfo_2_t FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef fwdinfo_2_tBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.fwdinfo_2_t";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQ_DATA = 4,
    VT_SEQ_FWD = 6,
    VT_TS_DATA = 8,
    VT_TS_FWD = 10,
    VT_FWDIX = 12,
    VT_TEAMID = 14
  };
  uint64_t seq_data() const {
    return GetField<uint64_t>(VT_SEQ_DATA, 0);
  }
  bool mutate_seq_data(uint64_t _seq_data = 0) {
    return SetField<uint64_t>(VT_SEQ_DATA, _seq_data, 0);
  }
  uint64_t seq_fwd() const {
    return GetField<uint64_t>(VT_SEQ_FWD, 0);
  }
  bool mutate_seq_fwd(uint64_t _seq_fwd = 0) {
    return SetField<uint64_t>(VT_SEQ_FWD, _seq_fwd, 0);
  }
  uint64_t ts_data() const {
    return GetField<uint64_t>(VT_TS_DATA, 0);
  }
  bool mutate_ts_data(uint64_t _ts_data = 0) {
    return SetField<uint64_t>(VT_TS_DATA, _ts_data, 0);
  }
  uint64_t ts_fwd() const {
    return GetField<uint64_t>(VT_TS_FWD, 0);
  }
  bool mutate_ts_fwd(uint64_t _ts_fwd = 0) {
    return SetField<uint64_t>(VT_TS_FWD, _ts_fwd, 0);
  }
  uint32_t fwdix() const {
    return GetField<uint32_t>(VT_FWDIX, 0);
  }
  bool mutate_fwdix(uint32_t _fwdix = 0) {
    return SetField<uint32_t>(VT_FWDIX, _fwdix, 0);
  }
  uint64_t teamid() const {
    return GetField<uint64_t>(VT_TEAMID, 0);
  }
  bool mutate_teamid(uint64_t _teamid = 0) {
    return SetField<uint64_t>(VT_TEAMID, _teamid, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_DATA, 8) &&
           VerifyField<uint64_t>(verifier, VT_SEQ_FWD, 8) &&
           VerifyField<uint64_t>(verifier, VT_TS_DATA, 8) &&
           VerifyField<uint64_t>(verifier, VT_TS_FWD, 8) &&
           VerifyField<uint32_t>(verifier, VT_FWDIX, 4) &&
           VerifyField<uint64_t>(verifier, VT_TEAMID, 8) &&
           verifier.EndTable();
  }
};

struct fwdinfo_2_tBuilder {
  typedef fwdinfo_2_t Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_seq_data(uint64_t seq_data) {
    fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_SEQ_DATA, seq_data, 0);
  }
  void add_seq_fwd(uint64_t seq_fwd) {
    fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_SEQ_FWD, seq_fwd, 0);
  }
  void add_ts_data(uint64_t ts_data) {
    fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TS_DATA, ts_data, 0);
  }
  void add_ts_fwd(uint64_t ts_fwd) {
    fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TS_FWD, ts_fwd, 0);
  }
  void add_fwdix(uint32_t fwdix) {
    fbb_.AddElement<uint32_t>(fwdinfo_2_t::VT_FWDIX, fwdix, 0);
  }
  void add_teamid(uint64_t teamid) {
    fbb_.AddElement<uint64_t>(fwdinfo_2_t::VT_TEAMID, teamid, 0);
  }
  explicit fwdinfo_2_tBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<fwdinfo_2_t> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<fwdinfo_2_t>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<fwdinfo_2_t> Createfwdinfo_2_t(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t seq_data = 0,
    uint64_t seq_fwd = 0,
    uint64_t ts_data = 0,
    uint64_t ts_fwd = 0,
    uint32_t fwdix = 0,
    uint64_t teamid = 0) {
  fwdinfo_2_tBuilder builder_(_fbb);
  builder_.add_teamid(teamid);
  builder_.add_ts_fwd(ts_fwd);
  builder_.add_ts_data(ts_data);
  builder_.add_seq_fwd(seq_fwd);
  builder_.add_seq_data(seq_data);
  builder_.add_fwdix(fwdix);
  return builder_.Finish();
}

struct EpicsPV FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EpicsPVBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f141_epics_nt.EpicsPV";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PV_TYPE = 6,
    VT_PV = 8,
    VT_TIMESTAMP = 10,
    VT_FWDINFO = 12,
    VT_FWDINFO2_TYPE = 14,
    VT_FWDINFO2 = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  BrightnESS::FlatBufs::f141_epics_nt::PV pv_type() const {
    return static_cast<BrightnESS::FlatBufs::f141_epics_nt::PV>(GetField<uint8_t>(VT_PV_TYPE, 0));
  }
  const void *pv() const {
    return GetPointer<const void *>(VT_PV);
  }
  template<typename T> const T *pv_as() const;
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte *pv_as_NTScalarByte() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarByte ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte *pv_as_NTScalarUByte() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarUByte ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort *pv_as_NTScalarShort() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarShort ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort *pv_as_NTScalarUShort() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarUShort ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt *pv_as_NTScalarInt() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarInt ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt *pv_as_NTScalarUInt() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarUInt ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong *pv_as_NTScalarLong() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarLong ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong *pv_as_NTScalarULong() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarULong ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat *pv_as_NTScalarFloat() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarFloat ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble *pv_as_NTScalarDouble() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarDouble ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte *pv_as_NTScalarArrayByte() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayByte ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte *pv_as_NTScalarArrayUByte() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayUByte ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort *pv_as_NTScalarArrayShort() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayShort ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort *pv_as_NTScalarArrayUShort() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayUShort ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt *pv_as_NTScalarArrayInt() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayInt ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt *pv_as_NTScalarArrayUInt() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayUInt ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong *pv_as_NTScalarArrayLong() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayLong ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong *pv_as_NTScalarArrayULong() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayULong ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat *pv_as_NTScalarArrayFloat() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayFloat ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat *>(pv()) : nullptr;
  }
  const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble *pv_as_NTScalarArrayDouble() const {
    return pv_type() == BrightnESS::FlatBufs::f141_epics_nt::PV::NTScalarArrayDouble ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble *>(pv()) : nullptr;
  }
  void *mutable_pv() {
    return GetPointer<void *>(VT_PV);
  }
  const BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *timeStamp() const {
    return GetStruct<const BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *>(VT_TIMESTAMP);
  }
  BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *mutable_timeStamp() {
    return GetStruct<BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *>(VT_TIMESTAMP);
  }
  const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *fwdinfo() const {
    return GetStruct<const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *>(VT_FWDINFO);
  }
  BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *mutable_fwdinfo() {
    return GetStruct<BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *>(VT_FWDINFO);
  }
  BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u fwdinfo2_type() const {
    return static_cast<BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u>(GetField<uint8_t>(VT_FWDINFO2_TYPE, 0));
  }
  const void *fwdinfo2() const {
    return GetPointer<const void *>(VT_FWDINFO2);
  }
  template<typename T> const T *fwdinfo2_as() const;
  const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t *fwdinfo2_as_fwdinfo_2_t() const {
    return fwdinfo2_type() == BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u::fwdinfo_2_t ? static_cast<const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t *>(fwdinfo2()) : nullptr;
  }
  void *mutable_fwdinfo2() {
    return GetPointer<void *>(VT_FWDINFO2);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_PV_TYPE, 1) &&
           VerifyOffset(verifier, VT_PV) &&
           VerifyPV(verifier, pv(), pv_type()) &&
           VerifyField<BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t>(verifier, VT_FWDINFO, 8) &&
           VerifyField<uint8_t>(verifier, VT_FWDINFO2_TYPE, 1) &&
           VerifyOffset(verifier, VT_FWDINFO2) &&
           Verifyfwdinfo_u(verifier, fwdinfo2(), fwdinfo2_type()) &&
           verifier.EndTable();
  }
};

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte>() const {
  return pv_as_NTScalarByte();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte>() const {
  return pv_as_NTScalarUByte();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort>() const {
  return pv_as_NTScalarShort();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort>() const {
  return pv_as_NTScalarUShort();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt>() const {
  return pv_as_NTScalarInt();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt>() const {
  return pv_as_NTScalarUInt();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong>() const {
  return pv_as_NTScalarLong();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong>() const {
  return pv_as_NTScalarULong();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat>() const {
  return pv_as_NTScalarFloat();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble>() const {
  return pv_as_NTScalarDouble();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte>() const {
  return pv_as_NTScalarArrayByte();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte>() const {
  return pv_as_NTScalarArrayUByte();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort>() const {
  return pv_as_NTScalarArrayShort();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort>() const {
  return pv_as_NTScalarArrayUShort();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt>() const {
  return pv_as_NTScalarArrayInt();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt>() const {
  return pv_as_NTScalarArrayUInt();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong>() const {
  return pv_as_NTScalarArrayLong();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong>() const {
  return pv_as_NTScalarArrayULong();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat>() const {
  return pv_as_NTScalarArrayFloat();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble *EpicsPV::pv_as<BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble>() const {
  return pv_as_NTScalarArrayDouble();
}

template<> inline const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t *EpicsPV::fwdinfo2_as<BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t>() const {
  return fwdinfo2_as_fwdinfo_2_t();
}

struct EpicsPVBuilder {
  typedef EpicsPV Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(EpicsPV::VT_NAME, name);
  }
  void add_pv_type(BrightnESS::FlatBufs::f141_epics_nt::PV pv_type) {
    fbb_.AddElement<uint8_t>(EpicsPV::VT_PV_TYPE, static_cast<uint8_t>(pv_type), 0);
  }
  void add_pv(::flatbuffers::Offset<void> pv) {
    fbb_.AddOffset(EpicsPV::VT_PV, pv);
  }
  void add_timeStamp(const BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *timeStamp) {
    fbb_.AddStruct(EpicsPV::VT_TIMESTAMP, timeStamp);
  }
  void add_fwdinfo(const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *fwdinfo) {
    fbb_.AddStruct(EpicsPV::VT_FWDINFO, fwdinfo);
  }
  void add_fwdinfo2_type(BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u fwdinfo2_type) {
    fbb_.AddElement<uint8_t>(EpicsPV::VT_FWDINFO2_TYPE, static_cast<uint8_t>(fwdinfo2_type), 0);
  }
  void add_fwdinfo2(::flatbuffers::Offset<void> fwdinfo2) {
    fbb_.AddOffset(EpicsPV::VT_FWDINFO2, fwdinfo2);
  }
  explicit EpicsPVBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EpicsPV> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EpicsPV>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EpicsPV> CreateEpicsPV(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    BrightnESS::FlatBufs::f141_epics_nt::PV pv_type = BrightnESS::FlatBufs::f141_epics_nt::PV::NONE,
    ::flatbuffers::Offset<void> pv = 0,
    const BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *timeStamp = nullptr,
    const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *fwdinfo = nullptr,
    BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u fwdinfo2_type = BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u::NONE,
    ::flatbuffers::Offset<void> fwdinfo2 = 0) {
  EpicsPVBuilder builder_(_fbb);
  builder_.add_fwdinfo2(fwdinfo2);
  builder_.add_fwdinfo(fwdinfo);
  builder_.add_timeStamp(timeStamp);
  builder_.add_pv(pv);
  builder_.add_name(name);
  builder_.add_fwdinfo2_type(fwdinfo2_type);
  builder_.add_pv_type(pv_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EpicsPV> CreateEpicsPVDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    BrightnESS::FlatBufs::f141_epics_nt::PV pv_type = BrightnESS::FlatBufs::f141_epics_nt::PV::NONE,
    ::flatbuffers::Offset<void> pv = 0,
    const BrightnESS::FlatBufs::f141_epics_nt::timeStamp_t *timeStamp = nullptr,
    const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_t *fwdinfo = nullptr,
    BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u fwdinfo2_type = BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_u::NONE,
    ::flatbuffers::Offset<void> fwdinfo2 = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return BrightnESS::FlatBufs::f141_epics_nt::CreateEpicsPV(
      _fbb,
      name__,
      pv_type,
      pv,
      timeStamp,
      fwdinfo,
      fwdinfo2_type,
      fwdinfo2);
}

inline bool VerifyPV(::flatbuffers::Verifier &verifier, const void *obj, PV type) {
  switch (type) {
    case PV::NONE: {
      return true;
    }
    case PV::NTScalarByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarUByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarUShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarUInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarLong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarLong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarULong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarFloat: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarDouble: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayUByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayUShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayUInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayLong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayLong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayULong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayFloat: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PV::NTScalarArrayDouble: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::NTScalarArrayDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPVVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<PV> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPV(
        verifier,  values->Get(i), types->GetEnum<PV>(i))) {
      return false;
    }
  }
  return true;
}

inline bool Verifyfwdinfo_u(::flatbuffers::Verifier &verifier, const void *obj, fwdinfo_u type) {
  switch (type) {
    case fwdinfo_u::NONE: {
      return true;
    }
    case fwdinfo_u::fwdinfo_2_t: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f141_epics_nt::fwdinfo_2_t *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool Verifyfwdinfo_uVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<fwdinfo_u> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!Verifyfwdinfo_u(
        verifier,  values->Get(i), types->GetEnum<fwdinfo_u>(i))) {
      return false;
    }
  }
  return true;
}

inline const BrightnESS::FlatBufs::f141_epics_nt::EpicsPV *GetEpicsPV(const void *buf) {
  return ::flatbuffers::GetRoot<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(buf);
}

inline const BrightnESS::FlatBufs::f141_epics_nt::EpicsPV *GetSizePrefixedEpicsPV(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(buf);
}

inline EpicsPV *GetMutableEpicsPV(void *buf) {
  return ::flatbuffers::GetMutableRoot<EpicsPV>(buf);
}

inline BrightnESS::FlatBufs::f141_epics_nt::EpicsPV *GetMutableSizePrefixedEpicsPV(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(buf);
}

inline const char *EpicsPVIdentifier() {
  return "f141";
}

inline bool EpicsPVBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EpicsPVIdentifier());
}

inline bool SizePrefixedEpicsPVBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EpicsPVIdentifier(), true);
}

inline bool VerifyEpicsPVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(EpicsPVIdentifier());
}

inline bool VerifySizePrefixedEpicsPVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV>(EpicsPVIdentifier());
}

inline void FinishEpicsPVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV> root) {
  fbb.Finish(root, EpicsPVIdentifier());
}

inline void FinishSizePrefixedEpicsPVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BrightnESS::FlatBufs::f141_epics_nt::EpicsPV> root) {
  fbb.FinishSizePrefixed(root, EpicsPVIdentifier());
}

}  // namespace f141_epics_nt
}  // namespace FlatBufs
}  // namespace BrightnESS

#endif  // FLATBUFFERS_GENERATED_F141EPICSNT_BRIGHTNESS_FLATBUFS_F141_EPICS_NT_H_
