// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ADARAREADETECTORARRAY_H_
#define FLATBUFFERS_GENERATED_ADARAREADETECTORARRAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Attribute;
struct AttributeBuilder;

struct ADArray;
struct ADArrayBuilder;

enum class DType : int8_t {
  int8 = 0,
  uint8 = 1,
  int16 = 2,
  uint16 = 3,
  int32 = 4,
  uint32 = 5,
  int64 = 6,
  uint64 = 7,
  float32 = 8,
  float64 = 9,
  c_string = 10,
  MIN = int8,
  MAX = c_string
};

inline const DType (&EnumValuesDType())[11] {
  static const DType values[] = {
    DType::int8,
    DType::uint8,
    DType::int16,
    DType::uint16,
    DType::int32,
    DType::uint32,
    DType::int64,
    DType::uint64,
    DType::float32,
    DType::float64,
    DType::c_string
  };
  return values;
}

inline const char * const *EnumNamesDType() {
  static const char * const names[12] = {
    "int8",
    "uint8",
    "int16",
    "uint16",
    "int32",
    "uint32",
    "int64",
    "uint64",
    "float32",
    "float64",
    "c_string",
    nullptr
  };
  return names;
}

inline const char *EnumNameDType(DType e) {
  if (::flatbuffers::IsOutRange(e, DType::int8, DType::c_string)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDType()[index];
}

struct Attribute FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttributeBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Attribute";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DESCRIPTION = 6,
    VT_SOURCE = 8,
    VT_DATA_TYPE = 10,
    VT_DATA = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  ::flatbuffers::String *mutable_description() {
    return GetPointer<::flatbuffers::String *>(VT_DESCRIPTION);
  }
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  ::flatbuffers::String *mutable_source() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE);
  }
  DType data_type() const {
    return static_cast<DType>(GetField<int8_t>(VT_DATA_TYPE, 0));
  }
  bool mutate_data_type(DType _data_type = static_cast<DType>(0)) {
    return SetField<int8_t>(VT_DATA_TYPE, static_cast<int8_t>(_data_type), 0);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct AttributeBuilder {
  typedef Attribute Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Attribute::VT_NAME, name);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Attribute::VT_DESCRIPTION, description);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Attribute::VT_SOURCE, source);
  }
  void add_data_type(DType data_type) {
    fbb_.AddElement<int8_t>(Attribute::VT_DATA_TYPE, static_cast<int8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Attribute::VT_DATA, data);
  }
  explicit AttributeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Attribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Attribute>(end);
    fbb_.Required(o, Attribute::VT_NAME);
    fbb_.Required(o, Attribute::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<Attribute> CreateAttribute(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    DType data_type = DType::int8,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  AttributeBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_source(source);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Attribute> CreateAttributeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *description = nullptr,
    const char *source = nullptr,
    DType data_type = DType::int8,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateAttribute(
      _fbb,
      name__,
      description__,
      source__,
      data_type,
      data__);
}

struct ADArray FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ADArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ADArray";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_NAME = 4,
    VT_ID = 6,
    VT_TIMESTAMP = 8,
    VT_DIMENSIONS = 10,
    VT_DATA_TYPE = 12,
    VT_DATA = 14,
    VT_ATTRIBUTES = 16
  };
  const ::flatbuffers::String *source_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  ::flatbuffers::String *mutable_source_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool mutate_id(int32_t _id = 0) {
    return SetField<int32_t>(VT_ID, _id, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp = 0) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  const ::flatbuffers::Vector<uint64_t> *dimensions() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_DIMENSIONS);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_dimensions() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_DIMENSIONS);
  }
  DType data_type() const {
    return static_cast<DType>(GetField<int8_t>(VT_DATA_TYPE, 0));
  }
  bool mutate_data_type(DType _data_type = static_cast<DType>(0)) {
    return SetField<int8_t>(VT_DATA_TYPE, static_cast<int8_t>(_data_type), 0);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Attribute>> *attributes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Attribute>> *>(VT_ATTRIBUTES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<Attribute>> *mutable_attributes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<Attribute>> *>(VT_ATTRIBUTES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SOURCE_NAME) &&
           verifier.VerifyString(source_name()) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyOffsetRequired(verifier, VT_DIMENSIONS) &&
           verifier.VerifyVector(dimensions()) &&
           VerifyField<int8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           verifier.VerifyVectorOfTables(attributes()) &&
           verifier.EndTable();
  }
};

struct ADArrayBuilder {
  typedef ADArray Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_name(::flatbuffers::Offset<::flatbuffers::String> source_name) {
    fbb_.AddOffset(ADArray::VT_SOURCE_NAME, source_name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(ADArray::VT_ID, id, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(ADArray::VT_TIMESTAMP, timestamp, 0);
  }
  void add_dimensions(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> dimensions) {
    fbb_.AddOffset(ADArray::VT_DIMENSIONS, dimensions);
  }
  void add_data_type(DType data_type) {
    fbb_.AddElement<int8_t>(ADArray::VT_DATA_TYPE, static_cast<int8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ADArray::VT_DATA, data);
  }
  void add_attributes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Attribute>>> attributes) {
    fbb_.AddOffset(ADArray::VT_ATTRIBUTES, attributes);
  }
  explicit ADArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ADArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ADArray>(end);
    fbb_.Required(o, ADArray::VT_SOURCE_NAME);
    fbb_.Required(o, ADArray::VT_DIMENSIONS);
    fbb_.Required(o, ADArray::VT_DATA);
    return o;
  }
};

inline ::flatbuffers::Offset<ADArray> CreateADArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> source_name = 0,
    int32_t id = 0,
    uint64_t timestamp = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> dimensions = 0,
    DType data_type = DType::int8,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Attribute>>> attributes = 0) {
  ADArrayBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_attributes(attributes);
  builder_.add_data(data);
  builder_.add_dimensions(dimensions);
  builder_.add_id(id);
  builder_.add_source_name(source_name);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ADArray> CreateADArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *source_name = nullptr,
    int32_t id = 0,
    uint64_t timestamp = 0,
    const std::vector<uint64_t> *dimensions = nullptr,
    DType data_type = DType::int8,
    const std::vector<uint8_t> *data = nullptr,
    const std::vector<::flatbuffers::Offset<Attribute>> *attributes = nullptr) {
  auto source_name__ = source_name ? _fbb.CreateString(source_name) : 0;
  auto dimensions__ = dimensions ? _fbb.CreateVector<uint64_t>(*dimensions) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<::flatbuffers::Offset<Attribute>>(*attributes) : 0;
  return CreateADArray(
      _fbb,
      source_name__,
      id,
      timestamp,
      dimensions__,
      data_type,
      data__,
      attributes__);
}

inline const ADArray *GetADArray(const void *buf) {
  return ::flatbuffers::GetRoot<ADArray>(buf);
}

inline const ADArray *GetSizePrefixedADArray(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ADArray>(buf);
}

inline ADArray *GetMutableADArray(void *buf) {
  return ::flatbuffers::GetMutableRoot<ADArray>(buf);
}

inline ADArray *GetMutableSizePrefixedADArray(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<ADArray>(buf);
}

inline const char *ADArrayIdentifier() {
  return "ADAr";
}

inline bool ADArrayBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ADArrayIdentifier());
}

inline bool SizePrefixedADArrayBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ADArrayIdentifier(), true);
}

inline bool VerifyADArrayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ADArray>(ADArrayIdentifier());
}

inline bool VerifySizePrefixedADArrayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ADArray>(ADArrayIdentifier());
}

inline void FinishADArrayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ADArray> root) {
  fbb.Finish(root, ADArrayIdentifier());
}

inline void FinishSizePrefixedADArrayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ADArray> root) {
  fbb.FinishSizePrefixed(root, ADArrayIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_ADARAREADETECTORARRAY_H_
