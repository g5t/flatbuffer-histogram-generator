// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TDCTTIMESTAMPS_H_
#define FLATBUFFERS_GENERATED_TDCTTIMESTAMPS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct timestamp;
struct timestampBuilder;

struct timestamp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef timestampBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "timestamp";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TIMESTAMPS = 6,
    VT_SEQUENCE_COUNTER = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint64_t> *timestamps() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_TIMESTAMPS);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_timestamps() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_TIMESTAMPS);
  }
  uint64_t sequence_counter() const {
    return GetField<uint64_t>(VT_SEQUENCE_COUNTER, 0);
  }
  bool mutate_sequence_counter(uint64_t _sequence_counter = 0) {
    return SetField<uint64_t>(VT_SEQUENCE_COUNTER, _sequence_counter, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_TIMESTAMPS) &&
           verifier.VerifyVector(timestamps()) &&
           VerifyField<uint64_t>(verifier, VT_SEQUENCE_COUNTER, 8) &&
           verifier.EndTable();
  }
};

struct timestampBuilder {
  typedef timestamp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(timestamp::VT_NAME, name);
  }
  void add_timestamps(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> timestamps) {
    fbb_.AddOffset(timestamp::VT_TIMESTAMPS, timestamps);
  }
  void add_sequence_counter(uint64_t sequence_counter) {
    fbb_.AddElement<uint64_t>(timestamp::VT_SEQUENCE_COUNTER, sequence_counter, 0);
  }
  explicit timestampBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<timestamp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<timestamp>(end);
    fbb_.Required(o, timestamp::VT_NAME);
    fbb_.Required(o, timestamp::VT_TIMESTAMPS);
    return o;
  }
};

inline ::flatbuffers::Offset<timestamp> Createtimestamp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> timestamps = 0,
    uint64_t sequence_counter = 0) {
  timestampBuilder builder_(_fbb);
  builder_.add_sequence_counter(sequence_counter);
  builder_.add_timestamps(timestamps);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<timestamp> CreatetimestampDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint64_t> *timestamps = nullptr,
    uint64_t sequence_counter = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto timestamps__ = timestamps ? _fbb.CreateVector<uint64_t>(*timestamps) : 0;
  return Createtimestamp(
      _fbb,
      name__,
      timestamps__,
      sequence_counter);
}

inline const timestamp *Gettimestamp(const void *buf) {
  return ::flatbuffers::GetRoot<timestamp>(buf);
}

inline const timestamp *GetSizePrefixedtimestamp(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<timestamp>(buf);
}

inline timestamp *GetMutabletimestamp(void *buf) {
  return ::flatbuffers::GetMutableRoot<timestamp>(buf);
}

inline timestamp *GetMutableSizePrefixedtimestamp(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<timestamp>(buf);
}

inline const char *timestampIdentifier() {
  return "tdct";
}

inline bool timestampBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, timestampIdentifier());
}

inline bool SizePrefixedtimestampBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, timestampIdentifier(), true);
}

inline bool VerifytimestampBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<timestamp>(timestampIdentifier());
}

inline bool VerifySizePrefixedtimestampBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<timestamp>(timestampIdentifier());
}

inline void FinishtimestampBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<timestamp> root) {
  fbb.Finish(root, timestampIdentifier());
}

inline void FinishSizePrefixedtimestampBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<timestamp> root) {
  fbb.FinishSizePrefixed(root, timestampIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_TDCTTIMESTAMPS_H_
