// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANSWACTIONRESPONSE_H_
#define FLATBUFFERS_GENERATED_ANSWACTIONRESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct ActionResponse;
struct ActionResponseBuilder;

enum class ActionType : int8_t {
  StartJob = 0,
  SetStopTime = 1,
  MIN = StartJob,
  MAX = SetStopTime
};

inline const ActionType (&EnumValuesActionType())[2] {
  static const ActionType values[] = {
    ActionType::StartJob,
    ActionType::SetStopTime
  };
  return values;
}

inline const char * const *EnumNamesActionType() {
  static const char * const names[3] = {
    "StartJob",
    "SetStopTime",
    nullptr
  };
  return names;
}

inline const char *EnumNameActionType(ActionType e) {
  if (::flatbuffers::IsOutRange(e, ActionType::StartJob, ActionType::SetStopTime)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesActionType()[index];
}

enum class ActionOutcome : int8_t {
  Success = 0,
  Failure = 1,
  MIN = Success,
  MAX = Failure
};

inline const ActionOutcome (&EnumValuesActionOutcome())[2] {
  static const ActionOutcome values[] = {
    ActionOutcome::Success,
    ActionOutcome::Failure
  };
  return values;
}

inline const char * const *EnumNamesActionOutcome() {
  static const char * const names[3] = {
    "Success",
    "Failure",
    nullptr
  };
  return names;
}

inline const char *EnumNameActionOutcome(ActionOutcome e) {
  if (::flatbuffers::IsOutRange(e, ActionOutcome::Success, ActionOutcome::Failure)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesActionOutcome()[index];
}

struct ActionResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionResponseBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ActionResponse";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVICE_ID = 4,
    VT_JOB_ID = 6,
    VT_ACTION = 8,
    VT_OUTCOME = 10,
    VT_STATUS_CODE = 12,
    VT_STOP_TIME = 14,
    VT_MESSAGE = 16,
    VT_COMMAND_ID = 18
  };
  const ::flatbuffers::String *service_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_ID);
  }
  ::flatbuffers::String *mutable_service_id() {
    return GetPointer<::flatbuffers::String *>(VT_SERVICE_ID);
  }
  const ::flatbuffers::String *job_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOB_ID);
  }
  ::flatbuffers::String *mutable_job_id() {
    return GetPointer<::flatbuffers::String *>(VT_JOB_ID);
  }
  ActionType action() const {
    return static_cast<ActionType>(GetField<int8_t>(VT_ACTION, 0));
  }
  bool mutate_action(ActionType _action = static_cast<ActionType>(0)) {
    return SetField<int8_t>(VT_ACTION, static_cast<int8_t>(_action), 0);
  }
  ActionOutcome outcome() const {
    return static_cast<ActionOutcome>(GetField<int8_t>(VT_OUTCOME, 0));
  }
  bool mutate_outcome(ActionOutcome _outcome = static_cast<ActionOutcome>(0)) {
    return SetField<int8_t>(VT_OUTCOME, static_cast<int8_t>(_outcome), 0);
  }
  int32_t status_code() const {
    return GetField<int32_t>(VT_STATUS_CODE, 0);
  }
  bool mutate_status_code(int32_t _status_code = 0) {
    return SetField<int32_t>(VT_STATUS_CODE, _status_code, 0);
  }
  uint64_t stop_time() const {
    return GetField<uint64_t>(VT_STOP_TIME, 0);
  }
  bool mutate_stop_time(uint64_t _stop_time = 0) {
    return SetField<uint64_t>(VT_STOP_TIME, _stop_time, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  ::flatbuffers::String *mutable_message() {
    return GetPointer<::flatbuffers::String *>(VT_MESSAGE);
  }
  const ::flatbuffers::String *command_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMAND_ID);
  }
  ::flatbuffers::String *mutable_command_id() {
    return GetPointer<::flatbuffers::String *>(VT_COMMAND_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SERVICE_ID) &&
           verifier.VerifyString(service_id()) &&
           VerifyOffsetRequired(verifier, VT_JOB_ID) &&
           verifier.VerifyString(job_id()) &&
           VerifyField<int8_t>(verifier, VT_ACTION, 1) &&
           VerifyField<int8_t>(verifier, VT_OUTCOME, 1) &&
           VerifyField<int32_t>(verifier, VT_STATUS_CODE, 4) &&
           VerifyField<uint64_t>(verifier, VT_STOP_TIME, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyOffset(verifier, VT_COMMAND_ID) &&
           verifier.VerifyString(command_id()) &&
           verifier.EndTable();
  }
};

struct ActionResponseBuilder {
  typedef ActionResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_service_id(::flatbuffers::Offset<::flatbuffers::String> service_id) {
    fbb_.AddOffset(ActionResponse::VT_SERVICE_ID, service_id);
  }
  void add_job_id(::flatbuffers::Offset<::flatbuffers::String> job_id) {
    fbb_.AddOffset(ActionResponse::VT_JOB_ID, job_id);
  }
  void add_action(ActionType action) {
    fbb_.AddElement<int8_t>(ActionResponse::VT_ACTION, static_cast<int8_t>(action), 0);
  }
  void add_outcome(ActionOutcome outcome) {
    fbb_.AddElement<int8_t>(ActionResponse::VT_OUTCOME, static_cast<int8_t>(outcome), 0);
  }
  void add_status_code(int32_t status_code) {
    fbb_.AddElement<int32_t>(ActionResponse::VT_STATUS_CODE, status_code, 0);
  }
  void add_stop_time(uint64_t stop_time) {
    fbb_.AddElement<uint64_t>(ActionResponse::VT_STOP_TIME, stop_time, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(ActionResponse::VT_MESSAGE, message);
  }
  void add_command_id(::flatbuffers::Offset<::flatbuffers::String> command_id) {
    fbb_.AddOffset(ActionResponse::VT_COMMAND_ID, command_id);
  }
  explicit ActionResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ActionResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ActionResponse>(end);
    fbb_.Required(o, ActionResponse::VT_SERVICE_ID);
    fbb_.Required(o, ActionResponse::VT_JOB_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<ActionResponse> CreateActionResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> service_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> job_id = 0,
    ActionType action = ActionType::StartJob,
    ActionOutcome outcome = ActionOutcome::Success,
    int32_t status_code = 0,
    uint64_t stop_time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    ::flatbuffers::Offset<::flatbuffers::String> command_id = 0) {
  ActionResponseBuilder builder_(_fbb);
  builder_.add_stop_time(stop_time);
  builder_.add_command_id(command_id);
  builder_.add_message(message);
  builder_.add_status_code(status_code);
  builder_.add_job_id(job_id);
  builder_.add_service_id(service_id);
  builder_.add_outcome(outcome);
  builder_.add_action(action);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ActionResponse> CreateActionResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *service_id = nullptr,
    const char *job_id = nullptr,
    ActionType action = ActionType::StartJob,
    ActionOutcome outcome = ActionOutcome::Success,
    int32_t status_code = 0,
    uint64_t stop_time = 0,
    const char *message = nullptr,
    const char *command_id = nullptr) {
  auto service_id__ = service_id ? _fbb.CreateString(service_id) : 0;
  auto job_id__ = job_id ? _fbb.CreateString(job_id) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  auto command_id__ = command_id ? _fbb.CreateString(command_id) : 0;
  return CreateActionResponse(
      _fbb,
      service_id__,
      job_id__,
      action,
      outcome,
      status_code,
      stop_time,
      message__,
      command_id__);
}

inline const ActionResponse *GetActionResponse(const void *buf) {
  return ::flatbuffers::GetRoot<ActionResponse>(buf);
}

inline const ActionResponse *GetSizePrefixedActionResponse(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ActionResponse>(buf);
}

inline ActionResponse *GetMutableActionResponse(void *buf) {
  return ::flatbuffers::GetMutableRoot<ActionResponse>(buf);
}

inline ActionResponse *GetMutableSizePrefixedActionResponse(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<ActionResponse>(buf);
}

inline const char *ActionResponseIdentifier() {
  return "answ";
}

inline bool ActionResponseBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ActionResponseIdentifier());
}

inline bool SizePrefixedActionResponseBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ActionResponseIdentifier(), true);
}

inline bool VerifyActionResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ActionResponse>(ActionResponseIdentifier());
}

inline bool VerifySizePrefixedActionResponseBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ActionResponse>(ActionResponseIdentifier());
}

inline void FinishActionResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ActionResponse> root) {
  fbb.Finish(root, ActionResponseIdentifier());
}

inline void FinishSizePrefixedActionResponseBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ActionResponse> root) {
  fbb.FinishSizePrefixed(root, ActionResponseIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_ANSWACTIONRESPONSE_H_
