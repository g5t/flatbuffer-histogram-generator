cmake_minimum_required(VERSION 3.28)
project(histogram_generator)

set(CMAKE_CXX_STANDARD 17)

# Use mold or gold linker if available on system (it is faster than default GNU linker)
if (UNIX AND NOT APPLE)
    execute_process(COMMAND ${CMAKE_C_COMPILER} -fuse-ld=mold -Wl,--version ERROR_QUIET OUTPUT_VARIABLE ld_version)
    if ("${ld_version}" MATCHES "mold")
        message(STATUS "Using mold linker")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=mold -Wl,--disable-new-dtags")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=mold -Wl,--disable-new-dtags")
    else()
        execute_process(COMMAND ${CMAKE_C_COMPILER} -fuse-ld=gold -Wl,--version ERROR_QUIET OUTPUT_VARIABLE ld_version)
        if ("${ld_version}" MATCHES "GNU gold")
            message(STATUS "Using gold linker")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold -Wl,--disable-new-dtags")
            set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold -Wl,--disable-new-dtags")
        endif()
    endif()
endif()

# Ensure we have access to da00 streaming-data-type flatbuffer header:
option(STREAMING_DATA_TYPES "Path to streaming-data-types" "")
message(STATUS "Does ${STREAMING_DATA_TYPES}/schemas exist?")
if (EXISTS "${STREAMING_DATA_TYPES}/schemas")
    message(STATUS "Found streaming-data-types, using it.")
    file(GLOB fb_schemata_files "${STREAMING_DATA_TYPES}/schemas/*.fbs")
    set(fb_header_INC "${PROJECT_BINARY_DIR}/schemas")
    find_program(flatc flatc PATHS "$ENV{flatc}" "$ENV{HOME}/.tools" "/opt/local/flatbuffers")
    message(STATUS "Using flatc compiler ${flatc}")
    foreach (fb_file ${fb_schemata_files})
        message(STATUS "Generating header file for ${fb_file}.")
        execute_process(COMMAND ${flatc} --cpp --gen-mutable --gen-name-strings --scoped-enums -o ${fb_header_INC} ${fb_file})
    endforeach()
    include_directories(${fb_header_INC})
else()
    message(STATUS "No streaming-data-types found, using bundled version.")
    find_package(streaming-data-types)
endif()

add_executable(histogram_generator main.cpp)
