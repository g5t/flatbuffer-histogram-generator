// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EV44EVENTS_H_
#define FLATBUFFERS_GENERATED_EV44EVENTS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Event44Message;
struct Event44MessageBuilder;

struct Event44Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Event44MessageBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Event44Message";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_NAME = 4,
    VT_MESSAGE_ID = 6,
    VT_REFERENCE_TIME = 8,
    VT_REFERENCE_TIME_INDEX = 10,
    VT_TIME_OF_FLIGHT = 12,
    VT_PIXEL_ID = 14
  };
  const ::flatbuffers::String *source_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  ::flatbuffers::String *mutable_source_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  int64_t message_id() const {
    return GetField<int64_t>(VT_MESSAGE_ID, 0);
  }
  bool mutate_message_id(int64_t _message_id = 0) {
    return SetField<int64_t>(VT_MESSAGE_ID, _message_id, 0);
  }
  const ::flatbuffers::Vector<int64_t> *reference_time() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_REFERENCE_TIME);
  }
  ::flatbuffers::Vector<int64_t> *mutable_reference_time() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_REFERENCE_TIME);
  }
  const ::flatbuffers::Vector<int32_t> *reference_time_index() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_REFERENCE_TIME_INDEX);
  }
  ::flatbuffers::Vector<int32_t> *mutable_reference_time_index() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_REFERENCE_TIME_INDEX);
  }
  const ::flatbuffers::Vector<int32_t> *time_of_flight() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_TIME_OF_FLIGHT);
  }
  ::flatbuffers::Vector<int32_t> *mutable_time_of_flight() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_TIME_OF_FLIGHT);
  }
  const ::flatbuffers::Vector<int32_t> *pixel_id() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_PIXEL_ID);
  }
  ::flatbuffers::Vector<int32_t> *mutable_pixel_id() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_PIXEL_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_SOURCE_NAME) &&
           verifier.VerifyString(source_name()) &&
           VerifyField<int64_t>(verifier, VT_MESSAGE_ID, 8) &&
           VerifyOffsetRequired(verifier, VT_REFERENCE_TIME) &&
           verifier.VerifyVector(reference_time()) &&
           VerifyOffsetRequired(verifier, VT_REFERENCE_TIME_INDEX) &&
           verifier.VerifyVector(reference_time_index()) &&
           VerifyOffset(verifier, VT_TIME_OF_FLIGHT) &&
           verifier.VerifyVector(time_of_flight()) &&
           VerifyOffset(verifier, VT_PIXEL_ID) &&
           verifier.VerifyVector(pixel_id()) &&
           verifier.EndTable();
  }
};

struct Event44MessageBuilder {
  typedef Event44Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_name(::flatbuffers::Offset<::flatbuffers::String> source_name) {
    fbb_.AddOffset(Event44Message::VT_SOURCE_NAME, source_name);
  }
  void add_message_id(int64_t message_id) {
    fbb_.AddElement<int64_t>(Event44Message::VT_MESSAGE_ID, message_id, 0);
  }
  void add_reference_time(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> reference_time) {
    fbb_.AddOffset(Event44Message::VT_REFERENCE_TIME, reference_time);
  }
  void add_reference_time_index(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> reference_time_index) {
    fbb_.AddOffset(Event44Message::VT_REFERENCE_TIME_INDEX, reference_time_index);
  }
  void add_time_of_flight(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> time_of_flight) {
    fbb_.AddOffset(Event44Message::VT_TIME_OF_FLIGHT, time_of_flight);
  }
  void add_pixel_id(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> pixel_id) {
    fbb_.AddOffset(Event44Message::VT_PIXEL_ID, pixel_id);
  }
  explicit Event44MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Event44Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Event44Message>(end);
    fbb_.Required(o, Event44Message::VT_SOURCE_NAME);
    fbb_.Required(o, Event44Message::VT_REFERENCE_TIME);
    fbb_.Required(o, Event44Message::VT_REFERENCE_TIME_INDEX);
    return o;
  }
};

inline ::flatbuffers::Offset<Event44Message> CreateEvent44Message(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> source_name = 0,
    int64_t message_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> reference_time = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> reference_time_index = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> time_of_flight = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> pixel_id = 0) {
  Event44MessageBuilder builder_(_fbb);
  builder_.add_message_id(message_id);
  builder_.add_pixel_id(pixel_id);
  builder_.add_time_of_flight(time_of_flight);
  builder_.add_reference_time_index(reference_time_index);
  builder_.add_reference_time(reference_time);
  builder_.add_source_name(source_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Event44Message> CreateEvent44MessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *source_name = nullptr,
    int64_t message_id = 0,
    const std::vector<int64_t> *reference_time = nullptr,
    const std::vector<int32_t> *reference_time_index = nullptr,
    const std::vector<int32_t> *time_of_flight = nullptr,
    const std::vector<int32_t> *pixel_id = nullptr) {
  auto source_name__ = source_name ? _fbb.CreateString(source_name) : 0;
  auto reference_time__ = reference_time ? _fbb.CreateVector<int64_t>(*reference_time) : 0;
  auto reference_time_index__ = reference_time_index ? _fbb.CreateVector<int32_t>(*reference_time_index) : 0;
  auto time_of_flight__ = time_of_flight ? _fbb.CreateVector<int32_t>(*time_of_flight) : 0;
  auto pixel_id__ = pixel_id ? _fbb.CreateVector<int32_t>(*pixel_id) : 0;
  return CreateEvent44Message(
      _fbb,
      source_name__,
      message_id,
      reference_time__,
      reference_time_index__,
      time_of_flight__,
      pixel_id__);
}

inline const Event44Message *GetEvent44Message(const void *buf) {
  return ::flatbuffers::GetRoot<Event44Message>(buf);
}

inline const Event44Message *GetSizePrefixedEvent44Message(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Event44Message>(buf);
}

inline Event44Message *GetMutableEvent44Message(void *buf) {
  return ::flatbuffers::GetMutableRoot<Event44Message>(buf);
}

inline Event44Message *GetMutableSizePrefixedEvent44Message(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<Event44Message>(buf);
}

inline const char *Event44MessageIdentifier() {
  return "ev44";
}

inline bool Event44MessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Event44MessageIdentifier());
}

inline bool SizePrefixedEvent44MessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Event44MessageIdentifier(), true);
}

inline bool VerifyEvent44MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Event44Message>(Event44MessageIdentifier());
}

inline bool VerifySizePrefixedEvent44MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Event44Message>(Event44MessageIdentifier());
}

inline void FinishEvent44MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Event44Message> root) {
  fbb.Finish(root, Event44MessageIdentifier());
}

inline void FinishSizePrefixedEvent44MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Event44Message> root) {
  fbb.FinishSizePrefixed(root, Event44MessageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_EV44EVENTS_H_
