// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SENVDATA_H_
#define FLATBUFFERS_GENERATED_SENVDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Int8Array;
struct Int8ArrayBuilder;

struct UInt8Array;
struct UInt8ArrayBuilder;

struct Int16Array;
struct Int16ArrayBuilder;

struct UInt16Array;
struct UInt16ArrayBuilder;

struct Int32Array;
struct Int32ArrayBuilder;

struct UInt32Array;
struct UInt32ArrayBuilder;

struct Int64Array;
struct Int64ArrayBuilder;

struct UInt64Array;
struct UInt64ArrayBuilder;

struct SampleEnvironmentData;
struct SampleEnvironmentDataBuilder;

enum class Location : int8_t {
  Unknown = 0,
  Start = 1,
  Middle = 2,
  End = 3,
  MIN = Unknown,
  MAX = End
};

inline const Location (&EnumValuesLocation())[4] {
  static const Location values[] = {
    Location::Unknown,
    Location::Start,
    Location::Middle,
    Location::End
  };
  return values;
}

inline const char * const *EnumNamesLocation() {
  static const char * const names[5] = {
    "Unknown",
    "Start",
    "Middle",
    "End",
    nullptr
  };
  return names;
}

inline const char *EnumNameLocation(Location e) {
  if (::flatbuffers::IsOutRange(e, Location::Unknown, Location::End)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLocation()[index];
}

enum class ValueUnion : uint8_t {
  NONE = 0,
  Int8Array = 1,
  UInt8Array = 2,
  Int16Array = 3,
  UInt16Array = 4,
  Int32Array = 5,
  UInt32Array = 6,
  Int64Array = 7,
  UInt64Array = 8,
  MIN = NONE,
  MAX = UInt64Array
};

inline const ValueUnion (&EnumValuesValueUnion())[9] {
  static const ValueUnion values[] = {
    ValueUnion::NONE,
    ValueUnion::Int8Array,
    ValueUnion::UInt8Array,
    ValueUnion::Int16Array,
    ValueUnion::UInt16Array,
    ValueUnion::Int32Array,
    ValueUnion::UInt32Array,
    ValueUnion::Int64Array,
    ValueUnion::UInt64Array
  };
  return values;
}

inline const char * const *EnumNamesValueUnion() {
  static const char * const names[10] = {
    "NONE",
    "Int8Array",
    "UInt8Array",
    "Int16Array",
    "UInt16Array",
    "Int32Array",
    "UInt32Array",
    "Int64Array",
    "UInt64Array",
    nullptr
  };
  return names;
}

inline const char *EnumNameValueUnion(ValueUnion e) {
  if (::flatbuffers::IsOutRange(e, ValueUnion::NONE, ValueUnion::UInt64Array)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesValueUnion()[index];
}

template<typename T> struct ValueUnionTraits {
  static const ValueUnion enum_value = ValueUnion::NONE;
};

template<> struct ValueUnionTraits<Int8Array> {
  static const ValueUnion enum_value = ValueUnion::Int8Array;
};

template<> struct ValueUnionTraits<UInt8Array> {
  static const ValueUnion enum_value = ValueUnion::UInt8Array;
};

template<> struct ValueUnionTraits<Int16Array> {
  static const ValueUnion enum_value = ValueUnion::Int16Array;
};

template<> struct ValueUnionTraits<UInt16Array> {
  static const ValueUnion enum_value = ValueUnion::UInt16Array;
};

template<> struct ValueUnionTraits<Int32Array> {
  static const ValueUnion enum_value = ValueUnion::Int32Array;
};

template<> struct ValueUnionTraits<UInt32Array> {
  static const ValueUnion enum_value = ValueUnion::UInt32Array;
};

template<> struct ValueUnionTraits<Int64Array> {
  static const ValueUnion enum_value = ValueUnion::Int64Array;
};

template<> struct ValueUnionTraits<UInt64Array> {
  static const ValueUnion enum_value = ValueUnion::UInt64Array;
};

bool VerifyValueUnion(::flatbuffers::Verifier &verifier, const void *obj, ValueUnion type);
bool VerifyValueUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ValueUnion> *types);

struct Int8Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int8ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int8Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int8ArrayBuilder {
  typedef Int8Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(Int8Array::VT_VALUE, value);
  }
  explicit Int8ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int8Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int8Array>(end);
    fbb_.Required(o, Int8Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int8Array> CreateInt8Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value = 0) {
  Int8ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int8Array> CreateInt8ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int8_t>(*value) : 0;
  return CreateInt8Array(
      _fbb,
      value__);
}

struct UInt8Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt8ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt8Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt8ArrayBuilder {
  typedef UInt8Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(UInt8Array::VT_VALUE, value);
  }
  explicit UInt8ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt8Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt8Array>(end);
    fbb_.Required(o, UInt8Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt8Array> CreateUInt8Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  UInt8ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt8Array> CreateUInt8ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return CreateUInt8Array(
      _fbb,
      value__);
}

struct Int16Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int16ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int16Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int16ArrayBuilder {
  typedef Int16Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value) {
    fbb_.AddOffset(Int16Array::VT_VALUE, value);
  }
  explicit Int16ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int16Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int16Array>(end);
    fbb_.Required(o, Int16Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int16Array> CreateInt16Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value = 0) {
  Int16ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int16Array> CreateInt16ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int16_t>(*value) : 0;
  return CreateInt16Array(
      _fbb,
      value__);
}

struct UInt16Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt16ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt16Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint16_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt16ArrayBuilder {
  typedef UInt16Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value) {
    fbb_.AddOffset(UInt16Array::VT_VALUE, value);
  }
  explicit UInt16ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt16Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt16Array>(end);
    fbb_.Required(o, UInt16Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt16Array> CreateUInt16Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value = 0) {
  UInt16ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt16Array> CreateUInt16ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint16_t>(*value) : 0;
  return CreateUInt16Array(
      _fbb,
      value__);
}

struct Int32Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int32ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int32Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int32ArrayBuilder {
  typedef Int32Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value) {
    fbb_.AddOffset(Int32Array::VT_VALUE, value);
  }
  explicit Int32ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int32Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int32Array>(end);
    fbb_.Required(o, Int32Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int32Array> CreateInt32Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value = 0) {
  Int32ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int32Array> CreateInt32ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int32_t>(*value) : 0;
  return CreateInt32Array(
      _fbb,
      value__);
}

struct UInt32Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt32ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt32Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt32ArrayBuilder {
  typedef UInt32Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value) {
    fbb_.AddOffset(UInt32Array::VT_VALUE, value);
  }
  explicit UInt32ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt32Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt32Array>(end);
    fbb_.Required(o, UInt32Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt32Array> CreateUInt32Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value = 0) {
  UInt32ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt32Array> CreateUInt32ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint32_t>(*value) : 0;
  return CreateUInt32Array(
      _fbb,
      value__);
}

struct Int64Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int64ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Int64Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<int64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int64ArrayBuilder {
  typedef Int64Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value) {
    fbb_.AddOffset(Int64Array::VT_VALUE, value);
  }
  explicit Int64ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int64Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int64Array>(end);
    fbb_.Required(o, Int64Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<Int64Array> CreateInt64Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> value = 0) {
  Int64ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int64Array> CreateInt64ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int64_t>(*value) : 0;
  return CreateInt64Array(
      _fbb,
      value__);
}

struct UInt64Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UInt64ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "UInt64Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint64_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct UInt64ArrayBuilder {
  typedef UInt64Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value) {
    fbb_.AddOffset(UInt64Array::VT_VALUE, value);
  }
  explicit UInt64ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UInt64Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UInt64Array>(end);
    fbb_.Required(o, UInt64Array::VT_VALUE);
    return o;
  }
};

inline ::flatbuffers::Offset<UInt64Array> CreateUInt64Array(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> value = 0) {
  UInt64ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UInt64Array> CreateUInt64ArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint64_t>(*value) : 0;
  return CreateUInt64Array(
      _fbb,
      value__);
}

struct SampleEnvironmentData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SampleEnvironmentDataBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "SampleEnvironmentData";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_CHANNEL = 6,
    VT_PACKETTIMESTAMP = 8,
    VT_TIMEDELTA = 10,
    VT_TIMESTAMPLOCATION = 12,
    VT_VALUES_TYPE = 14,
    VT_VALUES = 16,
    VT_TIMESTAMPS = 18,
    VT_MESSAGECOUNTER = 20
  };
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_Name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  int32_t Channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  bool mutate_Channel(int32_t _Channel = 0) {
    return SetField<int32_t>(VT_CHANNEL, _Channel, 0);
  }
  uint64_t PacketTimestamp() const {
    return GetField<uint64_t>(VT_PACKETTIMESTAMP, 0);
  }
  bool mutate_PacketTimestamp(uint64_t _PacketTimestamp = 0) {
    return SetField<uint64_t>(VT_PACKETTIMESTAMP, _PacketTimestamp, 0);
  }
  double TimeDelta() const {
    return GetField<double>(VT_TIMEDELTA, 0.0);
  }
  bool mutate_TimeDelta(double _TimeDelta = 0.0) {
    return SetField<double>(VT_TIMEDELTA, _TimeDelta, 0.0);
  }
  Location TimestampLocation() const {
    return static_cast<Location>(GetField<int8_t>(VT_TIMESTAMPLOCATION, 0));
  }
  bool mutate_TimestampLocation(Location _TimestampLocation = static_cast<Location>(0)) {
    return SetField<int8_t>(VT_TIMESTAMPLOCATION, static_cast<int8_t>(_TimestampLocation), 0);
  }
  ValueUnion Values_type() const {
    return static_cast<ValueUnion>(GetField<uint8_t>(VT_VALUES_TYPE, 0));
  }
  const void *Values() const {
    return GetPointer<const void *>(VT_VALUES);
  }
  template<typename T> const T *Values_as() const;
  const Int8Array *Values_as_Int8Array() const {
    return Values_type() == ValueUnion::Int8Array ? static_cast<const Int8Array *>(Values()) : nullptr;
  }
  const UInt8Array *Values_as_UInt8Array() const {
    return Values_type() == ValueUnion::UInt8Array ? static_cast<const UInt8Array *>(Values()) : nullptr;
  }
  const Int16Array *Values_as_Int16Array() const {
    return Values_type() == ValueUnion::Int16Array ? static_cast<const Int16Array *>(Values()) : nullptr;
  }
  const UInt16Array *Values_as_UInt16Array() const {
    return Values_type() == ValueUnion::UInt16Array ? static_cast<const UInt16Array *>(Values()) : nullptr;
  }
  const Int32Array *Values_as_Int32Array() const {
    return Values_type() == ValueUnion::Int32Array ? static_cast<const Int32Array *>(Values()) : nullptr;
  }
  const UInt32Array *Values_as_UInt32Array() const {
    return Values_type() == ValueUnion::UInt32Array ? static_cast<const UInt32Array *>(Values()) : nullptr;
  }
  const Int64Array *Values_as_Int64Array() const {
    return Values_type() == ValueUnion::Int64Array ? static_cast<const Int64Array *>(Values()) : nullptr;
  }
  const UInt64Array *Values_as_UInt64Array() const {
    return Values_type() == ValueUnion::UInt64Array ? static_cast<const UInt64Array *>(Values()) : nullptr;
  }
  void *mutable_Values() {
    return GetPointer<void *>(VT_VALUES);
  }
  const ::flatbuffers::Vector<uint64_t> *Timestamps() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_TIMESTAMPS);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_Timestamps() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_TIMESTAMPS);
  }
  uint64_t MessageCounter() const {
    return GetField<uint64_t>(VT_MESSAGECOUNTER, 0);
  }
  bool mutate_MessageCounter(uint64_t _MessageCounter = 0) {
    return SetField<uint64_t>(VT_MESSAGECOUNTER, _MessageCounter, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL, 4) &&
           VerifyField<uint64_t>(verifier, VT_PACKETTIMESTAMP, 8) &&
           VerifyField<double>(verifier, VT_TIMEDELTA, 8) &&
           VerifyField<int8_t>(verifier, VT_TIMESTAMPLOCATION, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALUES_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_VALUES) &&
           VerifyValueUnion(verifier, Values(), Values_type()) &&
           VerifyOffset(verifier, VT_TIMESTAMPS) &&
           verifier.VerifyVector(Timestamps()) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGECOUNTER, 8) &&
           verifier.EndTable();
  }
};

template<> inline const Int8Array *SampleEnvironmentData::Values_as<Int8Array>() const {
  return Values_as_Int8Array();
}

template<> inline const UInt8Array *SampleEnvironmentData::Values_as<UInt8Array>() const {
  return Values_as_UInt8Array();
}

template<> inline const Int16Array *SampleEnvironmentData::Values_as<Int16Array>() const {
  return Values_as_Int16Array();
}

template<> inline const UInt16Array *SampleEnvironmentData::Values_as<UInt16Array>() const {
  return Values_as_UInt16Array();
}

template<> inline const Int32Array *SampleEnvironmentData::Values_as<Int32Array>() const {
  return Values_as_Int32Array();
}

template<> inline const UInt32Array *SampleEnvironmentData::Values_as<UInt32Array>() const {
  return Values_as_UInt32Array();
}

template<> inline const Int64Array *SampleEnvironmentData::Values_as<Int64Array>() const {
  return Values_as_Int64Array();
}

template<> inline const UInt64Array *SampleEnvironmentData::Values_as<UInt64Array>() const {
  return Values_as_UInt64Array();
}

struct SampleEnvironmentDataBuilder {
  typedef SampleEnvironmentData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(SampleEnvironmentData::VT_NAME, Name);
  }
  void add_Channel(int32_t Channel) {
    fbb_.AddElement<int32_t>(SampleEnvironmentData::VT_CHANNEL, Channel, 0);
  }
  void add_PacketTimestamp(uint64_t PacketTimestamp) {
    fbb_.AddElement<uint64_t>(SampleEnvironmentData::VT_PACKETTIMESTAMP, PacketTimestamp, 0);
  }
  void add_TimeDelta(double TimeDelta) {
    fbb_.AddElement<double>(SampleEnvironmentData::VT_TIMEDELTA, TimeDelta, 0.0);
  }
  void add_TimestampLocation(Location TimestampLocation) {
    fbb_.AddElement<int8_t>(SampleEnvironmentData::VT_TIMESTAMPLOCATION, static_cast<int8_t>(TimestampLocation), 0);
  }
  void add_Values_type(ValueUnion Values_type) {
    fbb_.AddElement<uint8_t>(SampleEnvironmentData::VT_VALUES_TYPE, static_cast<uint8_t>(Values_type), 0);
  }
  void add_Values(::flatbuffers::Offset<void> Values) {
    fbb_.AddOffset(SampleEnvironmentData::VT_VALUES, Values);
  }
  void add_Timestamps(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> Timestamps) {
    fbb_.AddOffset(SampleEnvironmentData::VT_TIMESTAMPS, Timestamps);
  }
  void add_MessageCounter(uint64_t MessageCounter) {
    fbb_.AddElement<uint64_t>(SampleEnvironmentData::VT_MESSAGECOUNTER, MessageCounter, 0);
  }
  explicit SampleEnvironmentDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SampleEnvironmentData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SampleEnvironmentData>(end);
    fbb_.Required(o, SampleEnvironmentData::VT_NAME);
    fbb_.Required(o, SampleEnvironmentData::VT_VALUES);
    return o;
  }
};

inline ::flatbuffers::Offset<SampleEnvironmentData> CreateSampleEnvironmentData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0,
    int32_t Channel = 0,
    uint64_t PacketTimestamp = 0,
    double TimeDelta = 0.0,
    Location TimestampLocation = Location::Unknown,
    ValueUnion Values_type = ValueUnion::NONE,
    ::flatbuffers::Offset<void> Values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> Timestamps = 0,
    uint64_t MessageCounter = 0) {
  SampleEnvironmentDataBuilder builder_(_fbb);
  builder_.add_MessageCounter(MessageCounter);
  builder_.add_TimeDelta(TimeDelta);
  builder_.add_PacketTimestamp(PacketTimestamp);
  builder_.add_Timestamps(Timestamps);
  builder_.add_Values(Values);
  builder_.add_Channel(Channel);
  builder_.add_Name(Name);
  builder_.add_Values_type(Values_type);
  builder_.add_TimestampLocation(TimestampLocation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SampleEnvironmentData> CreateSampleEnvironmentDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *Name = nullptr,
    int32_t Channel = 0,
    uint64_t PacketTimestamp = 0,
    double TimeDelta = 0.0,
    Location TimestampLocation = Location::Unknown,
    ValueUnion Values_type = ValueUnion::NONE,
    ::flatbuffers::Offset<void> Values = 0,
    const std::vector<uint64_t> *Timestamps = nullptr,
    uint64_t MessageCounter = 0) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Timestamps__ = Timestamps ? _fbb.CreateVector<uint64_t>(*Timestamps) : 0;
  return CreateSampleEnvironmentData(
      _fbb,
      Name__,
      Channel,
      PacketTimestamp,
      TimeDelta,
      TimestampLocation,
      Values_type,
      Values,
      Timestamps__,
      MessageCounter);
}

inline bool VerifyValueUnion(::flatbuffers::Verifier &verifier, const void *obj, ValueUnion type) {
  switch (type) {
    case ValueUnion::NONE: {
      return true;
    }
    case ValueUnion::Int8Array: {
      auto ptr = reinterpret_cast<const Int8Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt8Array: {
      auto ptr = reinterpret_cast<const UInt8Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int16Array: {
      auto ptr = reinterpret_cast<const Int16Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt16Array: {
      auto ptr = reinterpret_cast<const UInt16Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int32Array: {
      auto ptr = reinterpret_cast<const Int32Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt32Array: {
      auto ptr = reinterpret_cast<const UInt32Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::Int64Array: {
      auto ptr = reinterpret_cast<const Int64Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ValueUnion::UInt64Array: {
      auto ptr = reinterpret_cast<const UInt64Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyValueUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<ValueUnion> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyValueUnion(
        verifier,  values->Get(i), types->GetEnum<ValueUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const SampleEnvironmentData *GetSampleEnvironmentData(const void *buf) {
  return ::flatbuffers::GetRoot<SampleEnvironmentData>(buf);
}

inline const SampleEnvironmentData *GetSizePrefixedSampleEnvironmentData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SampleEnvironmentData>(buf);
}

inline SampleEnvironmentData *GetMutableSampleEnvironmentData(void *buf) {
  return ::flatbuffers::GetMutableRoot<SampleEnvironmentData>(buf);
}

inline SampleEnvironmentData *GetMutableSizePrefixedSampleEnvironmentData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<SampleEnvironmentData>(buf);
}

inline const char *SampleEnvironmentDataIdentifier() {
  return "senv";
}

inline bool SampleEnvironmentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SampleEnvironmentDataIdentifier());
}

inline bool SizePrefixedSampleEnvironmentDataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SampleEnvironmentDataIdentifier(), true);
}

inline bool VerifySampleEnvironmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SampleEnvironmentData>(SampleEnvironmentDataIdentifier());
}

inline bool VerifySizePrefixedSampleEnvironmentDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SampleEnvironmentData>(SampleEnvironmentDataIdentifier());
}

inline void FinishSampleEnvironmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SampleEnvironmentData> root) {
  fbb.Finish(root, SampleEnvironmentDataIdentifier());
}

inline void FinishSizePrefixedSampleEnvironmentDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SampleEnvironmentData> root) {
  fbb.FinishSizePrefixed(root, SampleEnvironmentDataIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_SENVDATA_H_
