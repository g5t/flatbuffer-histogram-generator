// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_
#define FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace BrightnESS {
namespace FlatBufs {
namespace f140_general {

struct pvByte;
struct pvByteBuilder;

struct pvUByte;
struct pvUByteBuilder;

struct pvShort;
struct pvShortBuilder;

struct pvUShort;
struct pvUShortBuilder;

struct pvInt;
struct pvIntBuilder;

struct pvUInt;
struct pvUIntBuilder;

struct pvLong;
struct pvLongBuilder;

struct pvULong;
struct pvULongBuilder;

struct pvFloat;
struct pvFloatBuilder;

struct pvDouble;
struct pvDoubleBuilder;

struct pvString;
struct pvStringBuilder;

struct pvByte_a;
struct pvByte_aBuilder;

struct pvShort_a;
struct pvShort_aBuilder;

struct pvInt_a;
struct pvInt_aBuilder;

struct pvLong_a;
struct pvLong_aBuilder;

struct pvUByte_a;
struct pvUByte_aBuilder;

struct pvUShort_a;
struct pvUShort_aBuilder;

struct pvUInt_a;
struct pvUInt_aBuilder;

struct pvULong_a;
struct pvULong_aBuilder;

struct pvFloat_a;
struct pvFloat_aBuilder;

struct pvDouble_a;
struct pvDouble_aBuilder;

struct pvString_a;
struct pvString_aBuilder;

struct ObjM;
struct ObjMBuilder;

struct Obj;
struct ObjBuilder;

struct Obj_a;
struct Obj_aBuilder;

struct fwdinfo_t;

struct PV;
struct PVBuilder;

enum class F : uint8_t {
  NONE = 0,
  pvByte = 1,
  pvShort = 2,
  pvInt = 3,
  pvLong = 4,
  pvUByte = 5,
  pvUShort = 6,
  pvUInt = 7,
  pvULong = 8,
  pvFloat = 9,
  pvDouble = 10,
  pvString = 11,
  pvByte_a = 12,
  pvShort_a = 13,
  pvInt_a = 14,
  pvLong_a = 15,
  pvUByte_a = 16,
  pvUShort_a = 17,
  pvUInt_a = 18,
  pvULong_a = 19,
  pvFloat_a = 20,
  pvDouble_a = 21,
  pvString_a = 22,
  Obj = 23,
  Obj_a = 24,
  MIN = NONE,
  MAX = Obj_a
};

inline const F (&EnumValuesF())[25] {
  static const F values[] = {
    F::NONE,
    F::pvByte,
    F::pvShort,
    F::pvInt,
    F::pvLong,
    F::pvUByte,
    F::pvUShort,
    F::pvUInt,
    F::pvULong,
    F::pvFloat,
    F::pvDouble,
    F::pvString,
    F::pvByte_a,
    F::pvShort_a,
    F::pvInt_a,
    F::pvLong_a,
    F::pvUByte_a,
    F::pvUShort_a,
    F::pvUInt_a,
    F::pvULong_a,
    F::pvFloat_a,
    F::pvDouble_a,
    F::pvString_a,
    F::Obj,
    F::Obj_a
  };
  return values;
}

inline const char * const *EnumNamesF() {
  static const char * const names[26] = {
    "NONE",
    "pvByte",
    "pvShort",
    "pvInt",
    "pvLong",
    "pvUByte",
    "pvUShort",
    "pvUInt",
    "pvULong",
    "pvFloat",
    "pvDouble",
    "pvString",
    "pvByte_a",
    "pvShort_a",
    "pvInt_a",
    "pvLong_a",
    "pvUByte_a",
    "pvUShort_a",
    "pvUInt_a",
    "pvULong_a",
    "pvFloat_a",
    "pvDouble_a",
    "pvString_a",
    "Obj",
    "Obj_a",
    nullptr
  };
  return names;
}

inline const char *EnumNameF(F e) {
  if (::flatbuffers::IsOutRange(e, F::NONE, F::Obj_a)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesF()[index];
}

template<typename T> struct FTraits {
  static const F enum_value = F::NONE;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvByte> {
  static const F enum_value = F::pvByte;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvShort> {
  static const F enum_value = F::pvShort;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvInt> {
  static const F enum_value = F::pvInt;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvLong> {
  static const F enum_value = F::pvLong;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUByte> {
  static const F enum_value = F::pvUByte;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUShort> {
  static const F enum_value = F::pvUShort;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUInt> {
  static const F enum_value = F::pvUInt;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvULong> {
  static const F enum_value = F::pvULong;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvFloat> {
  static const F enum_value = F::pvFloat;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvDouble> {
  static const F enum_value = F::pvDouble;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvString> {
  static const F enum_value = F::pvString;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvByte_a> {
  static const F enum_value = F::pvByte_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvShort_a> {
  static const F enum_value = F::pvShort_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvInt_a> {
  static const F enum_value = F::pvInt_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvLong_a> {
  static const F enum_value = F::pvLong_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUByte_a> {
  static const F enum_value = F::pvUByte_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUShort_a> {
  static const F enum_value = F::pvUShort_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvUInt_a> {
  static const F enum_value = F::pvUInt_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvULong_a> {
  static const F enum_value = F::pvULong_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvFloat_a> {
  static const F enum_value = F::pvFloat_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvDouble_a> {
  static const F enum_value = F::pvDouble_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::pvString_a> {
  static const F enum_value = F::pvString_a;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::Obj> {
  static const F enum_value = F::Obj;
};

template<> struct FTraits<BrightnESS::FlatBufs::f140_general::Obj_a> {
  static const F enum_value = F::Obj_a;
};

bool VerifyF(::flatbuffers::Verifier &verifier, const void *obj, F type);
bool VerifyFVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<F> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) fwdinfo_t FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t seq_;
  uint64_t ts_data_;
  uint64_t ts_fwd_;
  uint8_t fwdix_;
  int8_t padding0__;  int16_t padding1__;  int32_t padding2__;

 public:
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.fwdinfo_t";
  }
  fwdinfo_t()
      : seq_(0),
        ts_data_(0),
        ts_fwd_(0),
        fwdix_(0),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  fwdinfo_t(uint64_t _seq, uint64_t _ts_data, uint64_t _ts_fwd, uint8_t _fwdix)
      : seq_(::flatbuffers::EndianScalar(_seq)),
        ts_data_(::flatbuffers::EndianScalar(_ts_data)),
        ts_fwd_(::flatbuffers::EndianScalar(_ts_fwd)),
        fwdix_(::flatbuffers::EndianScalar(_fwdix)),
        padding0__(0),
        padding1__(0),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  uint64_t seq() const {
    return ::flatbuffers::EndianScalar(seq_);
  }
  void mutate_seq(uint64_t _seq) {
    ::flatbuffers::WriteScalar(&seq_, _seq);
  }
  uint64_t ts_data() const {
    return ::flatbuffers::EndianScalar(ts_data_);
  }
  void mutate_ts_data(uint64_t _ts_data) {
    ::flatbuffers::WriteScalar(&ts_data_, _ts_data);
  }
  uint64_t ts_fwd() const {
    return ::flatbuffers::EndianScalar(ts_fwd_);
  }
  void mutate_ts_fwd(uint64_t _ts_fwd) {
    ::flatbuffers::WriteScalar(&ts_fwd_, _ts_fwd);
  }
  uint8_t fwdix() const {
    return ::flatbuffers::EndianScalar(fwdix_);
  }
  void mutate_fwdix(uint8_t _fwdix) {
    ::flatbuffers::WriteScalar(&fwdix_, _fwdix);
  }
};
FLATBUFFERS_STRUCT_END(fwdinfo_t, 32);

struct pvByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  int8_t v() const {
    return GetField<int8_t>(VT_V, 0);
  }
  bool mutate_v(int8_t _v = 0) {
    return SetField<int8_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_V, 1) &&
           verifier.EndTable();
  }
};

struct pvByteBuilder {
  typedef pvByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(int8_t v) {
    fbb_.AddElement<int8_t>(pvByte::VT_V, v, 0);
  }
  explicit pvByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvByte> CreatepvByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t v = 0) {
  pvByteBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUByte FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUByteBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUByte";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  uint8_t v() const {
    return GetField<uint8_t>(VT_V, 0);
  }
  bool mutate_v(uint8_t _v = 0) {
    return SetField<uint8_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_V, 1) &&
           verifier.EndTable();
  }
};

struct pvUByteBuilder {
  typedef pvUByte Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(uint8_t v) {
    fbb_.AddElement<uint8_t>(pvUByte::VT_V, v, 0);
  }
  explicit pvUByteBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUByte> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUByte>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUByte> CreatepvUByte(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t v = 0) {
  pvUByteBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  int16_t v() const {
    return GetField<int16_t>(VT_V, 0);
  }
  bool mutate_v(int16_t _v = 0) {
    return SetField<int16_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_V, 2) &&
           verifier.EndTable();
  }
};

struct pvShortBuilder {
  typedef pvShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(int16_t v) {
    fbb_.AddElement<int16_t>(pvShort::VT_V, v, 0);
  }
  explicit pvShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvShort> CreatepvShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t v = 0) {
  pvShortBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUShort FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUShortBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUShort";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  uint16_t v() const {
    return GetField<uint16_t>(VT_V, 0);
  }
  bool mutate_v(uint16_t _v = 0) {
    return SetField<uint16_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_V, 2) &&
           verifier.EndTable();
  }
};

struct pvUShortBuilder {
  typedef pvUShort Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(uint16_t v) {
    fbb_.AddElement<uint16_t>(pvUShort::VT_V, v, 0);
  }
  explicit pvUShortBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUShort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUShort>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUShort> CreatepvUShort(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t v = 0) {
  pvUShortBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  int32_t v() const {
    return GetField<int32_t>(VT_V, 0);
  }
  bool mutate_v(int32_t _v = 0) {
    return SetField<int32_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_V, 4) &&
           verifier.EndTable();
  }
};

struct pvIntBuilder {
  typedef pvInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(int32_t v) {
    fbb_.AddElement<int32_t>(pvInt::VT_V, v, 0);
  }
  explicit pvIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvInt> CreatepvInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t v = 0) {
  pvIntBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvUInt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUIntBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUInt";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  uint32_t v() const {
    return GetField<uint32_t>(VT_V, 0);
  }
  bool mutate_v(uint32_t _v = 0) {
    return SetField<uint32_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_V, 4) &&
           verifier.EndTable();
  }
};

struct pvUIntBuilder {
  typedef pvUInt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(uint32_t v) {
    fbb_.AddElement<uint32_t>(pvUInt::VT_V, v, 0);
  }
  explicit pvUIntBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUInt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUInt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUInt> CreatepvUInt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t v = 0) {
  pvUIntBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvLong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvLongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvLong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  int64_t v() const {
    return GetField<int64_t>(VT_V, 0);
  }
  bool mutate_v(int64_t _v = 0) {
    return SetField<int64_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_V, 8) &&
           verifier.EndTable();
  }
};

struct pvLongBuilder {
  typedef pvLong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(int64_t v) {
    fbb_.AddElement<int64_t>(pvLong::VT_V, v, 0);
  }
  explicit pvLongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvLong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvLong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvLong> CreatepvLong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t v = 0) {
  pvLongBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvULong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvULongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvULong";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  uint64_t v() const {
    return GetField<uint64_t>(VT_V, 0);
  }
  bool mutate_v(uint64_t _v = 0) {
    return SetField<uint64_t>(VT_V, _v, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_V, 8) &&
           verifier.EndTable();
  }
};

struct pvULongBuilder {
  typedef pvULong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(uint64_t v) {
    fbb_.AddElement<uint64_t>(pvULong::VT_V, v, 0);
  }
  explicit pvULongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvULong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvULong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvULong> CreatepvULong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t v = 0) {
  pvULongBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvFloat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvFloatBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvFloat";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  float v() const {
    return GetField<float>(VT_V, 0.0f);
  }
  bool mutate_v(float _v = 0.0f) {
    return SetField<float>(VT_V, _v, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_V, 4) &&
           verifier.EndTable();
  }
};

struct pvFloatBuilder {
  typedef pvFloat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(float v) {
    fbb_.AddElement<float>(pvFloat::VT_V, v, 0.0f);
  }
  explicit pvFloatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvFloat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvFloat> CreatepvFloat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float v = 0.0f) {
  pvFloatBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvDouble FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvDoubleBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvDouble";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  double v() const {
    return GetField<double>(VT_V, 0.0);
  }
  bool mutate_v(double _v = 0.0) {
    return SetField<double>(VT_V, _v, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_V, 8) &&
           verifier.EndTable();
  }
};

struct pvDoubleBuilder {
  typedef pvDouble Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(double v) {
    fbb_.AddElement<double>(pvDouble::VT_V, v, 0.0);
  }
  explicit pvDoubleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvDouble> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvDouble>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvDouble> CreatepvDouble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double v = 0.0) {
  pvDoubleBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

struct pvString FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvStringBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvString";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::String *v() const {
    return GetPointer<const ::flatbuffers::String *>(VT_V);
  }
  ::flatbuffers::String *mutable_v() {
    return GetPointer<::flatbuffers::String *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyString(v()) &&
           verifier.EndTable();
  }
};

struct pvStringBuilder {
  typedef pvString Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::String> v) {
    fbb_.AddOffset(pvString::VT_V, v);
  }
  explicit pvStringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvString>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvString> CreatepvString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> v = 0) {
  pvStringBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvString> CreatepvStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *v = nullptr) {
  auto v__ = v ? _fbb.CreateString(v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvString(
      _fbb,
      v__);
}

struct pvByte_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvByte_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvByte_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<int8_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_V);
  }
  ::flatbuffers::Vector<int8_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvByte_aBuilder {
  typedef pvByte_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> v) {
    fbb_.AddOffset(pvByte_a::VT_V, v);
  }
  explicit pvByte_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvByte_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvByte_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvByte_a> CreatepvByte_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> v = 0) {
  pvByte_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvByte_a> CreatepvByte_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<int8_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvByte_a(
      _fbb,
      v__);
}

struct pvShort_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvShort_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvShort_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<int16_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_V);
  }
  ::flatbuffers::Vector<int16_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<int16_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvShort_aBuilder {
  typedef pvShort_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> v) {
    fbb_.AddOffset(pvShort_a::VT_V, v);
  }
  explicit pvShort_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvShort_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvShort_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvShort_a> CreatepvShort_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> v = 0) {
  pvShort_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvShort_a> CreatepvShort_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<int16_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvShort_a(
      _fbb,
      v__);
}

struct pvInt_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvInt_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvInt_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<int32_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_V);
  }
  ::flatbuffers::Vector<int32_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<int32_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvInt_aBuilder {
  typedef pvInt_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> v) {
    fbb_.AddOffset(pvInt_a::VT_V, v);
  }
  explicit pvInt_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvInt_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvInt_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvInt_a> CreatepvInt_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> v = 0) {
  pvInt_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvInt_a> CreatepvInt_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<int32_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvInt_a(
      _fbb,
      v__);
}

struct pvLong_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvLong_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvLong_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<int64_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_V);
  }
  ::flatbuffers::Vector<int64_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<int64_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvLong_aBuilder {
  typedef pvLong_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> v) {
    fbb_.AddOffset(pvLong_a::VT_V, v);
  }
  explicit pvLong_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvLong_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvLong_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvLong_a> CreatepvLong_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int64_t>> v = 0) {
  pvLong_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvLong_a> CreatepvLong_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<int64_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvLong_a(
      _fbb,
      v__);
}

struct pvUByte_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUByte_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUByte_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<uint8_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_V);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvUByte_aBuilder {
  typedef pvUByte_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> v) {
    fbb_.AddOffset(pvUByte_a::VT_V, v);
  }
  explicit pvUByte_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUByte_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUByte_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUByte_a> CreatepvUByte_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> v = 0) {
  pvUByte_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvUByte_a> CreatepvUByte_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<uint8_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvUByte_a(
      _fbb,
      v__);
}

struct pvUShort_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUShort_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUShort_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<uint16_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_V);
  }
  ::flatbuffers::Vector<uint16_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<uint16_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvUShort_aBuilder {
  typedef pvUShort_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> v) {
    fbb_.AddOffset(pvUShort_a::VT_V, v);
  }
  explicit pvUShort_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUShort_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUShort_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUShort_a> CreatepvUShort_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> v = 0) {
  pvUShort_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvUShort_a> CreatepvUShort_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<uint16_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvUShort_a(
      _fbb,
      v__);
}

struct pvUInt_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvUInt_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvUInt_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<uint32_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_V);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvUInt_aBuilder {
  typedef pvUInt_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> v) {
    fbb_.AddOffset(pvUInt_a::VT_V, v);
  }
  explicit pvUInt_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvUInt_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvUInt_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvUInt_a> CreatepvUInt_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> v = 0) {
  pvUInt_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvUInt_a> CreatepvUInt_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<uint32_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvUInt_a(
      _fbb,
      v__);
}

struct pvULong_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvULong_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvULong_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<uint64_t> *v() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_V);
  }
  ::flatbuffers::Vector<uint64_t> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<uint64_t> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvULong_aBuilder {
  typedef pvULong_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> v) {
    fbb_.AddOffset(pvULong_a::VT_V, v);
  }
  explicit pvULong_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvULong_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvULong_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvULong_a> CreatepvULong_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> v = 0) {
  pvULong_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvULong_a> CreatepvULong_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<uint64_t>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvULong_a(
      _fbb,
      v__);
}

struct pvFloat_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvFloat_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvFloat_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<float> *v() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_V);
  }
  ::flatbuffers::Vector<float> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvFloat_aBuilder {
  typedef pvFloat_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<float>> v) {
    fbb_.AddOffset(pvFloat_a::VT_V, v);
  }
  explicit pvFloat_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvFloat_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvFloat_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvFloat_a> CreatepvFloat_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> v = 0) {
  pvFloat_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvFloat_a> CreatepvFloat_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<float>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvFloat_a(
      _fbb,
      v__);
}

struct pvDouble_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvDouble_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvDouble_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<double> *v() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_V);
  }
  ::flatbuffers::Vector<double> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<double> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.EndTable();
  }
};

struct pvDouble_aBuilder {
  typedef pvDouble_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<double>> v) {
    fbb_.AddOffset(pvDouble_a::VT_V, v);
  }
  explicit pvDouble_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvDouble_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvDouble_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvDouble_a> CreatepvDouble_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> v = 0) {
  pvDouble_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvDouble_a> CreatepvDouble_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<double>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvDouble_a(
      _fbb,
      v__);
}

struct pvString_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pvString_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.pvString_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *v() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_V);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.VerifyVectorOfStrings(v()) &&
           verifier.EndTable();
  }
};

struct pvString_aBuilder {
  typedef pvString_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> v) {
    fbb_.AddOffset(pvString_a::VT_V, v);
  }
  explicit pvString_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pvString_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pvString_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pvString_a> CreatepvString_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> v = 0) {
  pvString_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<pvString_a> CreatepvString_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatepvString_a(
      _fbb,
      v__);
}

struct ObjM FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjMBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.ObjM";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_K = 4,
    VT_V_TYPE = 6,
    VT_V = 8
  };
  const ::flatbuffers::String *k() const {
    return GetPointer<const ::flatbuffers::String *>(VT_K);
  }
  ::flatbuffers::String *mutable_k() {
    return GetPointer<::flatbuffers::String *>(VT_K);
  }
  BrightnESS::FlatBufs::f140_general::F v_type() const {
    return static_cast<BrightnESS::FlatBufs::f140_general::F>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  template<typename T> const T *v_as() const;
  const BrightnESS::FlatBufs::f140_general::pvByte *v_as_pvByte() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvByte ? static_cast<const BrightnESS::FlatBufs::f140_general::pvByte *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvShort *v_as_pvShort() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvShort ? static_cast<const BrightnESS::FlatBufs::f140_general::pvShort *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvInt *v_as_pvInt() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvInt ? static_cast<const BrightnESS::FlatBufs::f140_general::pvInt *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvLong *v_as_pvLong() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvLong ? static_cast<const BrightnESS::FlatBufs::f140_general::pvLong *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUByte *v_as_pvUByte() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUByte ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUByte *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUShort *v_as_pvUShort() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUShort ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUShort *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUInt *v_as_pvUInt() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUInt ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUInt *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvULong *v_as_pvULong() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvULong ? static_cast<const BrightnESS::FlatBufs::f140_general::pvULong *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvFloat *v_as_pvFloat() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvFloat ? static_cast<const BrightnESS::FlatBufs::f140_general::pvFloat *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvDouble *v_as_pvDouble() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvDouble ? static_cast<const BrightnESS::FlatBufs::f140_general::pvDouble *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvString *v_as_pvString() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvString ? static_cast<const BrightnESS::FlatBufs::f140_general::pvString *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvByte_a *v_as_pvByte_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvByte_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvByte_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvShort_a *v_as_pvShort_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvShort_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvShort_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvInt_a *v_as_pvInt_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvInt_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvInt_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvLong_a *v_as_pvLong_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvLong_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvLong_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUByte_a *v_as_pvUByte_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUByte_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUByte_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUShort_a *v_as_pvUShort_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUShort_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUShort_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUInt_a *v_as_pvUInt_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUInt_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUInt_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvULong_a *v_as_pvULong_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvULong_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvULong_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvFloat_a *v_as_pvFloat_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvFloat_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvFloat_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvDouble_a *v_as_pvDouble_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvDouble_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvDouble_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvString_a *v_as_pvString_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvString_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvString_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::Obj *v_as_Obj() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::Obj ? static_cast<const BrightnESS::FlatBufs::f140_general::Obj *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::Obj_a *v_as_Obj_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::Obj_a ? static_cast<const BrightnESS::FlatBufs::f140_general::Obj_a *>(v()) : nullptr;
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_K) &&
           verifier.VerifyString(k()) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE, 1) &&
           VerifyOffset(verifier, VT_V) &&
           VerifyF(verifier, v(), v_type()) &&
           verifier.EndTable();
  }
};

template<> inline const BrightnESS::FlatBufs::f140_general::pvByte *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvByte>() const {
  return v_as_pvByte();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvShort *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvShort>() const {
  return v_as_pvShort();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvInt *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvInt>() const {
  return v_as_pvInt();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvLong *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvLong>() const {
  return v_as_pvLong();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUByte *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUByte>() const {
  return v_as_pvUByte();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUShort *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUShort>() const {
  return v_as_pvUShort();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUInt *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUInt>() const {
  return v_as_pvUInt();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvULong *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvULong>() const {
  return v_as_pvULong();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvFloat *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvFloat>() const {
  return v_as_pvFloat();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvDouble *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvDouble>() const {
  return v_as_pvDouble();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvString *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvString>() const {
  return v_as_pvString();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvByte_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvByte_a>() const {
  return v_as_pvByte_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvShort_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvShort_a>() const {
  return v_as_pvShort_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvInt_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvInt_a>() const {
  return v_as_pvInt_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvLong_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvLong_a>() const {
  return v_as_pvLong_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUByte_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUByte_a>() const {
  return v_as_pvUByte_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUShort_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUShort_a>() const {
  return v_as_pvUShort_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUInt_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvUInt_a>() const {
  return v_as_pvUInt_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvULong_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvULong_a>() const {
  return v_as_pvULong_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvFloat_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvFloat_a>() const {
  return v_as_pvFloat_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvDouble_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvDouble_a>() const {
  return v_as_pvDouble_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvString_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::pvString_a>() const {
  return v_as_pvString_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::Obj *ObjM::v_as<BrightnESS::FlatBufs::f140_general::Obj>() const {
  return v_as_Obj();
}

template<> inline const BrightnESS::FlatBufs::f140_general::Obj_a *ObjM::v_as<BrightnESS::FlatBufs::f140_general::Obj_a>() const {
  return v_as_Obj_a();
}

struct ObjMBuilder {
  typedef ObjM Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_k(::flatbuffers::Offset<::flatbuffers::String> k) {
    fbb_.AddOffset(ObjM::VT_K, k);
  }
  void add_v_type(BrightnESS::FlatBufs::f140_general::F v_type) {
    fbb_.AddElement<uint8_t>(ObjM::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(::flatbuffers::Offset<void> v) {
    fbb_.AddOffset(ObjM::VT_V, v);
  }
  explicit ObjMBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjM>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjM> CreateObjM(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> k = 0,
    BrightnESS::FlatBufs::f140_general::F v_type = BrightnESS::FlatBufs::f140_general::F::NONE,
    ::flatbuffers::Offset<void> v = 0) {
  ObjMBuilder builder_(_fbb);
  builder_.add_v(v);
  builder_.add_k(k);
  builder_.add_v_type(v_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ObjM> CreateObjMDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *k = nullptr,
    BrightnESS::FlatBufs::f140_general::F v_type = BrightnESS::FlatBufs::f140_general::F::NONE,
    ::flatbuffers::Offset<void> v = 0) {
  auto k__ = k ? _fbb.CreateString(k) : 0;
  return BrightnESS::FlatBufs::f140_general::CreateObjM(
      _fbb,
      k__,
      v_type,
      v);
}

struct Obj FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.Obj";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>> *ms() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>> *>(VT_MS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>> *mutable_ms() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>> *>(VT_MS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MS) &&
           verifier.VerifyVector(ms()) &&
           verifier.VerifyVectorOfTables(ms()) &&
           verifier.EndTable();
  }
};

struct ObjBuilder {
  typedef Obj Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>>> ms) {
    fbb_.AddOffset(Obj::VT_MS, ms);
  }
  explicit ObjBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Obj> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Obj>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Obj> CreateObj(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>>> ms = 0) {
  ObjBuilder builder_(_fbb);
  builder_.add_ms(ms);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Obj> CreateObjDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>> *ms = nullptr) {
  auto ms__ = ms ? _fbb.CreateVector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::ObjM>>(*ms) : 0;
  return BrightnESS::FlatBufs::f140_general::CreateObj(
      _fbb,
      ms__);
}

struct Obj_a FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Obj_aBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.Obj_a";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>> *v() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>> *>(VT_V);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>> *mutable_v() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>> *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyVector(v()) &&
           verifier.VerifyVectorOfTables(v()) &&
           verifier.EndTable();
  }
};

struct Obj_aBuilder {
  typedef Obj_a Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>>> v) {
    fbb_.AddOffset(Obj_a::VT_V, v);
  }
  explicit Obj_aBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Obj_a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Obj_a>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Obj_a> CreateObj_a(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>>> v = 0) {
  Obj_aBuilder builder_(_fbb);
  builder_.add_v(v);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Obj_a> CreateObj_aDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>> *v = nullptr) {
  auto v__ = v ? _fbb.CreateVector<::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::Obj>>(*v) : 0;
  return BrightnESS::FlatBufs::f140_general::CreateObj_a(
      _fbb,
      v__);
}

struct PV FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PVBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "BrightnESS.FlatBufs.f140_general.PV";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_N = 4,
    VT_V_TYPE = 6,
    VT_V = 8,
    VT_FWDINFO = 10
  };
  const ::flatbuffers::String *n() const {
    return GetPointer<const ::flatbuffers::String *>(VT_N);
  }
  ::flatbuffers::String *mutable_n() {
    return GetPointer<::flatbuffers::String *>(VT_N);
  }
  BrightnESS::FlatBufs::f140_general::F v_type() const {
    return static_cast<BrightnESS::FlatBufs::f140_general::F>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  template<typename T> const T *v_as() const;
  const BrightnESS::FlatBufs::f140_general::pvByte *v_as_pvByte() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvByte ? static_cast<const BrightnESS::FlatBufs::f140_general::pvByte *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvShort *v_as_pvShort() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvShort ? static_cast<const BrightnESS::FlatBufs::f140_general::pvShort *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvInt *v_as_pvInt() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvInt ? static_cast<const BrightnESS::FlatBufs::f140_general::pvInt *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvLong *v_as_pvLong() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvLong ? static_cast<const BrightnESS::FlatBufs::f140_general::pvLong *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUByte *v_as_pvUByte() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUByte ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUByte *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUShort *v_as_pvUShort() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUShort ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUShort *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUInt *v_as_pvUInt() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUInt ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUInt *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvULong *v_as_pvULong() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvULong ? static_cast<const BrightnESS::FlatBufs::f140_general::pvULong *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvFloat *v_as_pvFloat() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvFloat ? static_cast<const BrightnESS::FlatBufs::f140_general::pvFloat *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvDouble *v_as_pvDouble() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvDouble ? static_cast<const BrightnESS::FlatBufs::f140_general::pvDouble *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvString *v_as_pvString() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvString ? static_cast<const BrightnESS::FlatBufs::f140_general::pvString *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvByte_a *v_as_pvByte_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvByte_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvByte_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvShort_a *v_as_pvShort_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvShort_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvShort_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvInt_a *v_as_pvInt_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvInt_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvInt_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvLong_a *v_as_pvLong_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvLong_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvLong_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUByte_a *v_as_pvUByte_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUByte_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUByte_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUShort_a *v_as_pvUShort_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUShort_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUShort_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvUInt_a *v_as_pvUInt_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvUInt_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvUInt_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvULong_a *v_as_pvULong_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvULong_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvULong_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvFloat_a *v_as_pvFloat_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvFloat_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvFloat_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvDouble_a *v_as_pvDouble_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvDouble_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvDouble_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::pvString_a *v_as_pvString_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::pvString_a ? static_cast<const BrightnESS::FlatBufs::f140_general::pvString_a *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::Obj *v_as_Obj() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::Obj ? static_cast<const BrightnESS::FlatBufs::f140_general::Obj *>(v()) : nullptr;
  }
  const BrightnESS::FlatBufs::f140_general::Obj_a *v_as_Obj_a() const {
    return v_type() == BrightnESS::FlatBufs::f140_general::F::Obj_a ? static_cast<const BrightnESS::FlatBufs::f140_general::Obj_a *>(v()) : nullptr;
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  const BrightnESS::FlatBufs::f140_general::fwdinfo_t *fwdinfo() const {
    return GetStruct<const BrightnESS::FlatBufs::f140_general::fwdinfo_t *>(VT_FWDINFO);
  }
  BrightnESS::FlatBufs::f140_general::fwdinfo_t *mutable_fwdinfo() {
    return GetStruct<BrightnESS::FlatBufs::f140_general::fwdinfo_t *>(VT_FWDINFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_N) &&
           verifier.VerifyString(n()) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE, 1) &&
           VerifyOffset(verifier, VT_V) &&
           VerifyF(verifier, v(), v_type()) &&
           VerifyField<BrightnESS::FlatBufs::f140_general::fwdinfo_t>(verifier, VT_FWDINFO, 8) &&
           verifier.EndTable();
  }
};

template<> inline const BrightnESS::FlatBufs::f140_general::pvByte *PV::v_as<BrightnESS::FlatBufs::f140_general::pvByte>() const {
  return v_as_pvByte();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvShort *PV::v_as<BrightnESS::FlatBufs::f140_general::pvShort>() const {
  return v_as_pvShort();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvInt *PV::v_as<BrightnESS::FlatBufs::f140_general::pvInt>() const {
  return v_as_pvInt();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvLong *PV::v_as<BrightnESS::FlatBufs::f140_general::pvLong>() const {
  return v_as_pvLong();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUByte *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUByte>() const {
  return v_as_pvUByte();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUShort *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUShort>() const {
  return v_as_pvUShort();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUInt *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUInt>() const {
  return v_as_pvUInt();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvULong *PV::v_as<BrightnESS::FlatBufs::f140_general::pvULong>() const {
  return v_as_pvULong();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvFloat *PV::v_as<BrightnESS::FlatBufs::f140_general::pvFloat>() const {
  return v_as_pvFloat();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvDouble *PV::v_as<BrightnESS::FlatBufs::f140_general::pvDouble>() const {
  return v_as_pvDouble();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvString *PV::v_as<BrightnESS::FlatBufs::f140_general::pvString>() const {
  return v_as_pvString();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvByte_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvByte_a>() const {
  return v_as_pvByte_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvShort_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvShort_a>() const {
  return v_as_pvShort_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvInt_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvInt_a>() const {
  return v_as_pvInt_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvLong_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvLong_a>() const {
  return v_as_pvLong_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUByte_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUByte_a>() const {
  return v_as_pvUByte_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUShort_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUShort_a>() const {
  return v_as_pvUShort_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvUInt_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvUInt_a>() const {
  return v_as_pvUInt_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvULong_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvULong_a>() const {
  return v_as_pvULong_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvFloat_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvFloat_a>() const {
  return v_as_pvFloat_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvDouble_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvDouble_a>() const {
  return v_as_pvDouble_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::pvString_a *PV::v_as<BrightnESS::FlatBufs::f140_general::pvString_a>() const {
  return v_as_pvString_a();
}

template<> inline const BrightnESS::FlatBufs::f140_general::Obj *PV::v_as<BrightnESS::FlatBufs::f140_general::Obj>() const {
  return v_as_Obj();
}

template<> inline const BrightnESS::FlatBufs::f140_general::Obj_a *PV::v_as<BrightnESS::FlatBufs::f140_general::Obj_a>() const {
  return v_as_Obj_a();
}

struct PVBuilder {
  typedef PV Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_n(::flatbuffers::Offset<::flatbuffers::String> n) {
    fbb_.AddOffset(PV::VT_N, n);
  }
  void add_v_type(BrightnESS::FlatBufs::f140_general::F v_type) {
    fbb_.AddElement<uint8_t>(PV::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(::flatbuffers::Offset<void> v) {
    fbb_.AddOffset(PV::VT_V, v);
  }
  void add_fwdinfo(const BrightnESS::FlatBufs::f140_general::fwdinfo_t *fwdinfo) {
    fbb_.AddStruct(PV::VT_FWDINFO, fwdinfo);
  }
  explicit PVBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PV> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PV>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PV> CreatePV(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> n = 0,
    BrightnESS::FlatBufs::f140_general::F v_type = BrightnESS::FlatBufs::f140_general::F::NONE,
    ::flatbuffers::Offset<void> v = 0,
    const BrightnESS::FlatBufs::f140_general::fwdinfo_t *fwdinfo = nullptr) {
  PVBuilder builder_(_fbb);
  builder_.add_fwdinfo(fwdinfo);
  builder_.add_v(v);
  builder_.add_n(n);
  builder_.add_v_type(v_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PV> CreatePVDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *n = nullptr,
    BrightnESS::FlatBufs::f140_general::F v_type = BrightnESS::FlatBufs::f140_general::F::NONE,
    ::flatbuffers::Offset<void> v = 0,
    const BrightnESS::FlatBufs::f140_general::fwdinfo_t *fwdinfo = nullptr) {
  auto n__ = n ? _fbb.CreateString(n) : 0;
  return BrightnESS::FlatBufs::f140_general::CreatePV(
      _fbb,
      n__,
      v_type,
      v,
      fwdinfo);
}

inline bool VerifyF(::flatbuffers::Verifier &verifier, const void *obj, F type) {
  switch (type) {
    case F::NONE: {
      return true;
    }
    case F::pvByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvLong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvLong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUByte: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUByte *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUShort: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUShort *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUInt: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUInt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvULong: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvULong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvFloat: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvFloat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvDouble: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvDouble *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvString: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvByte_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvByte_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvShort_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvShort_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvInt_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvInt_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvLong_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvLong_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUByte_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUByte_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUShort_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUShort_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvUInt_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvUInt_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvULong_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvULong_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvFloat_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvFloat_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvDouble_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvDouble_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::pvString_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::pvString_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::Obj: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::Obj *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case F::Obj_a: {
      auto ptr = reinterpret_cast<const BrightnESS::FlatBufs::f140_general::Obj_a *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<F> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyF(
        verifier,  values->Get(i), types->GetEnum<F>(i))) {
      return false;
    }
  }
  return true;
}

inline const BrightnESS::FlatBufs::f140_general::PV *GetPV(const void *buf) {
  return ::flatbuffers::GetRoot<BrightnESS::FlatBufs::f140_general::PV>(buf);
}

inline const BrightnESS::FlatBufs::f140_general::PV *GetSizePrefixedPV(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BrightnESS::FlatBufs::f140_general::PV>(buf);
}

inline PV *GetMutablePV(void *buf) {
  return ::flatbuffers::GetMutableRoot<PV>(buf);
}

inline BrightnESS::FlatBufs::f140_general::PV *GetMutableSizePrefixedPV(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<BrightnESS::FlatBufs::f140_general::PV>(buf);
}

inline const char *PVIdentifier() {
  return "f140";
}

inline bool PVBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PVIdentifier());
}

inline bool SizePrefixedPVBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PVIdentifier(), true);
}

inline bool VerifyPVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BrightnESS::FlatBufs::f140_general::PV>(PVIdentifier());
}

inline bool VerifySizePrefixedPVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BrightnESS::FlatBufs::f140_general::PV>(PVIdentifier());
}

inline void FinishPVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::PV> root) {
  fbb.Finish(root, PVIdentifier());
}

inline void FinishSizePrefixedPVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BrightnESS::FlatBufs::f140_general::PV> root) {
  fbb.FinishSizePrefixed(root, PVIdentifier());
}

}  // namespace f140_general
}  // namespace FlatBufs
}  // namespace BrightnESS

#endif  // FLATBUFFERS_GENERATED_F140GENERAL_BRIGHTNESS_FLATBUFS_F140_GENERAL_H_
