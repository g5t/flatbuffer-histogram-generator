// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NS11TYPEDCACHEENTRY_H_
#define FLATBUFFERS_GENERATED_NS11TYPEDCACHEENTRY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Bool;
struct BoolBuilder;

struct Long;
struct LongBuilder;

struct Double;
struct DoubleBuilder;

struct String;
struct StringBuilder;

struct Object;
struct ObjectBuilder;

struct DictMapping;
struct DictMappingBuilder;

struct Dict;
struct DictBuilder;

struct ArrayElement;
struct ArrayElementBuilder;

struct Array;
struct ArrayBuilder;

struct TypedCacheEntry;
struct TypedCacheEntryBuilder;

enum class ArrayType : int8_t {
  ListType = 0,
  TupleType = 1,
  SetType = 2,
  MIN = ListType,
  MAX = SetType
};

inline const ArrayType (&EnumValuesArrayType())[3] {
  static const ArrayType values[] = {
    ArrayType::ListType,
    ArrayType::TupleType,
    ArrayType::SetType
  };
  return values;
}

inline const char * const *EnumNamesArrayType() {
  static const char * const names[4] = {
    "ListType",
    "TupleType",
    "SetType",
    nullptr
  };
  return names;
}

inline const char *EnumNameArrayType(ArrayType e) {
  if (::flatbuffers::IsOutRange(e, ArrayType::ListType, ArrayType::SetType)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesArrayType()[index];
}

enum class Value : uint8_t {
  NONE = 0,
  Object = 1,
  Bool = 2,
  Long = 3,
  Double = 4,
  String = 5,
  Dict = 6,
  Array = 7,
  MIN = NONE,
  MAX = Array
};

inline const Value (&EnumValuesValue())[8] {
  static const Value values[] = {
    Value::NONE,
    Value::Object,
    Value::Bool,
    Value::Long,
    Value::Double,
    Value::String,
    Value::Dict,
    Value::Array
  };
  return values;
}

inline const char * const *EnumNamesValue() {
  static const char * const names[9] = {
    "NONE",
    "Object",
    "Bool",
    "Long",
    "Double",
    "String",
    "Dict",
    "Array",
    nullptr
  };
  return names;
}

inline const char *EnumNameValue(Value e) {
  if (::flatbuffers::IsOutRange(e, Value::NONE, Value::Array)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesValue()[index];
}

template<typename T> struct ValueTraits {
  static const Value enum_value = Value::NONE;
};

template<> struct ValueTraits<Object> {
  static const Value enum_value = Value::Object;
};

template<> struct ValueTraits<Bool> {
  static const Value enum_value = Value::Bool;
};

template<> struct ValueTraits<Long> {
  static const Value enum_value = Value::Long;
};

template<> struct ValueTraits<Double> {
  static const Value enum_value = Value::Double;
};

template<> struct ValueTraits<String> {
  static const Value enum_value = Value::String;
};

template<> struct ValueTraits<Dict> {
  static const Value enum_value = Value::Dict;
};

template<> struct ValueTraits<Array> {
  static const Value enum_value = Value::Array;
};

bool VerifyValue(::flatbuffers::Verifier &verifier, const void *obj, Value type);
bool VerifyValueVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Value> *types);

struct Bool FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoolBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Bool";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value = 0) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct BoolBuilder {
  typedef Bool Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(Bool::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit BoolBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Bool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Bool>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Bool> CreateBool(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  BoolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Long FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LongBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Long";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool mutate_value(int64_t _value = 0) {
    return SetField<int64_t>(VT_VALUE, _value, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct LongBuilder {
  typedef Long Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(Long::VT_VALUE, value, 0);
  }
  explicit LongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Long> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Long>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Long> CreateLong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  LongBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Double FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DoubleBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Double";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool mutate_value(double _value = 0.0) {
    return SetField<double>(VT_VALUE, _value, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct DoubleBuilder {
  typedef Double Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(Double::VT_VALUE, value, 0.0);
  }
  explicit DoubleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Double> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Double>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Double> CreateDouble(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct String FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "String";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  ::flatbuffers::String *mutable_value() {
    return GetPointer<::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringBuilder {
  typedef String Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(String::VT_VALUE, value);
  }
  explicit StringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<String> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<String>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<String> CreateString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<String> CreateStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return CreateString(
      _fbb,
      value__);
}

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Object";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  ::flatbuffers::String *mutable_value() {
    return GetPointer<::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Object::VT_VALUE, value);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Object> CreateObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return CreateObject(
      _fbb,
      value__);
}

struct DictMapping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DictMappingBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "DictMapping";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_K_TYPE = 4,
    VT_K = 6,
    VT_V_TYPE = 8,
    VT_V = 10
  };
  Value k_type() const {
    return static_cast<Value>(GetField<uint8_t>(VT_K_TYPE, 0));
  }
  const void *k() const {
    return GetPointer<const void *>(VT_K);
  }
  template<typename T> const T *k_as() const;
  const Object *k_as_Object() const {
    return k_type() == Value::Object ? static_cast<const Object *>(k()) : nullptr;
  }
  const Bool *k_as_Bool() const {
    return k_type() == Value::Bool ? static_cast<const Bool *>(k()) : nullptr;
  }
  const Long *k_as_Long() const {
    return k_type() == Value::Long ? static_cast<const Long *>(k()) : nullptr;
  }
  const Double *k_as_Double() const {
    return k_type() == Value::Double ? static_cast<const Double *>(k()) : nullptr;
  }
  const String *k_as_String() const {
    return k_type() == Value::String ? static_cast<const String *>(k()) : nullptr;
  }
  const Dict *k_as_Dict() const {
    return k_type() == Value::Dict ? static_cast<const Dict *>(k()) : nullptr;
  }
  const Array *k_as_Array() const {
    return k_type() == Value::Array ? static_cast<const Array *>(k()) : nullptr;
  }
  void *mutable_k() {
    return GetPointer<void *>(VT_K);
  }
  Value v_type() const {
    return static_cast<Value>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  template<typename T> const T *v_as() const;
  const Object *v_as_Object() const {
    return v_type() == Value::Object ? static_cast<const Object *>(v()) : nullptr;
  }
  const Bool *v_as_Bool() const {
    return v_type() == Value::Bool ? static_cast<const Bool *>(v()) : nullptr;
  }
  const Long *v_as_Long() const {
    return v_type() == Value::Long ? static_cast<const Long *>(v()) : nullptr;
  }
  const Double *v_as_Double() const {
    return v_type() == Value::Double ? static_cast<const Double *>(v()) : nullptr;
  }
  const String *v_as_String() const {
    return v_type() == Value::String ? static_cast<const String *>(v()) : nullptr;
  }
  const Dict *v_as_Dict() const {
    return v_type() == Value::Dict ? static_cast<const Dict *>(v()) : nullptr;
  }
  const Array *v_as_Array() const {
    return v_type() == Value::Array ? static_cast<const Array *>(v()) : nullptr;
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_K_TYPE, 1) &&
           VerifyOffset(verifier, VT_K) &&
           VerifyValue(verifier, k(), k_type()) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE, 1) &&
           VerifyOffset(verifier, VT_V) &&
           VerifyValue(verifier, v(), v_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Object *DictMapping::k_as<Object>() const {
  return k_as_Object();
}

template<> inline const Bool *DictMapping::k_as<Bool>() const {
  return k_as_Bool();
}

template<> inline const Long *DictMapping::k_as<Long>() const {
  return k_as_Long();
}

template<> inline const Double *DictMapping::k_as<Double>() const {
  return k_as_Double();
}

template<> inline const String *DictMapping::k_as<String>() const {
  return k_as_String();
}

template<> inline const Dict *DictMapping::k_as<Dict>() const {
  return k_as_Dict();
}

template<> inline const Array *DictMapping::k_as<Array>() const {
  return k_as_Array();
}

template<> inline const Object *DictMapping::v_as<Object>() const {
  return v_as_Object();
}

template<> inline const Bool *DictMapping::v_as<Bool>() const {
  return v_as_Bool();
}

template<> inline const Long *DictMapping::v_as<Long>() const {
  return v_as_Long();
}

template<> inline const Double *DictMapping::v_as<Double>() const {
  return v_as_Double();
}

template<> inline const String *DictMapping::v_as<String>() const {
  return v_as_String();
}

template<> inline const Dict *DictMapping::v_as<Dict>() const {
  return v_as_Dict();
}

template<> inline const Array *DictMapping::v_as<Array>() const {
  return v_as_Array();
}

struct DictMappingBuilder {
  typedef DictMapping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_k_type(Value k_type) {
    fbb_.AddElement<uint8_t>(DictMapping::VT_K_TYPE, static_cast<uint8_t>(k_type), 0);
  }
  void add_k(::flatbuffers::Offset<void> k) {
    fbb_.AddOffset(DictMapping::VT_K, k);
  }
  void add_v_type(Value v_type) {
    fbb_.AddElement<uint8_t>(DictMapping::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(::flatbuffers::Offset<void> v) {
    fbb_.AddOffset(DictMapping::VT_V, v);
  }
  explicit DictMappingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DictMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DictMapping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DictMapping> CreateDictMapping(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Value k_type = Value::NONE,
    ::flatbuffers::Offset<void> k = 0,
    Value v_type = Value::NONE,
    ::flatbuffers::Offset<void> v = 0) {
  DictMappingBuilder builder_(_fbb);
  builder_.add_v(v);
  builder_.add_k(k);
  builder_.add_v_type(v_type);
  builder_.add_k_type(k_type);
  return builder_.Finish();
}

struct Dict FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DictBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Dict";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>> *value() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.VerifyVectorOfTables(value()) &&
           verifier.EndTable();
  }
};

struct DictBuilder {
  typedef Dict Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>>> value) {
    fbb_.AddOffset(Dict::VT_VALUE, value);
  }
  explicit DictBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Dict> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Dict>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Dict> CreateDict(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<DictMapping>>> value = 0) {
  DictBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Dict> CreateDictDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<DictMapping>> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<::flatbuffers::Offset<DictMapping>>(*value) : 0;
  return CreateDict(
      _fbb,
      value__);
}

struct ArrayElement FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArrayElementBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "ArrayElement";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V_TYPE = 4,
    VT_V = 6
  };
  Value v_type() const {
    return static_cast<Value>(GetField<uint8_t>(VT_V_TYPE, 0));
  }
  const void *v() const {
    return GetPointer<const void *>(VT_V);
  }
  template<typename T> const T *v_as() const;
  const Object *v_as_Object() const {
    return v_type() == Value::Object ? static_cast<const Object *>(v()) : nullptr;
  }
  const Bool *v_as_Bool() const {
    return v_type() == Value::Bool ? static_cast<const Bool *>(v()) : nullptr;
  }
  const Long *v_as_Long() const {
    return v_type() == Value::Long ? static_cast<const Long *>(v()) : nullptr;
  }
  const Double *v_as_Double() const {
    return v_type() == Value::Double ? static_cast<const Double *>(v()) : nullptr;
  }
  const String *v_as_String() const {
    return v_type() == Value::String ? static_cast<const String *>(v()) : nullptr;
  }
  const Dict *v_as_Dict() const {
    return v_type() == Value::Dict ? static_cast<const Dict *>(v()) : nullptr;
  }
  const Array *v_as_Array() const {
    return v_type() == Value::Array ? static_cast<const Array *>(v()) : nullptr;
  }
  void *mutable_v() {
    return GetPointer<void *>(VT_V);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_V_TYPE, 1) &&
           VerifyOffset(verifier, VT_V) &&
           VerifyValue(verifier, v(), v_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Object *ArrayElement::v_as<Object>() const {
  return v_as_Object();
}

template<> inline const Bool *ArrayElement::v_as<Bool>() const {
  return v_as_Bool();
}

template<> inline const Long *ArrayElement::v_as<Long>() const {
  return v_as_Long();
}

template<> inline const Double *ArrayElement::v_as<Double>() const {
  return v_as_Double();
}

template<> inline const String *ArrayElement::v_as<String>() const {
  return v_as_String();
}

template<> inline const Dict *ArrayElement::v_as<Dict>() const {
  return v_as_Dict();
}

template<> inline const Array *ArrayElement::v_as<Array>() const {
  return v_as_Array();
}

struct ArrayElementBuilder {
  typedef ArrayElement Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_v_type(Value v_type) {
    fbb_.AddElement<uint8_t>(ArrayElement::VT_V_TYPE, static_cast<uint8_t>(v_type), 0);
  }
  void add_v(::flatbuffers::Offset<void> v) {
    fbb_.AddOffset(ArrayElement::VT_V, v);
  }
  explicit ArrayElementBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ArrayElement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ArrayElement>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ArrayElement> CreateArrayElement(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Value v_type = Value::NONE,
    ::flatbuffers::Offset<void> v = 0) {
  ArrayElementBuilder builder_(_fbb);
  builder_.add_v(v);
  builder_.add_v_type(v_type);
  return builder_.Finish();
}

struct Array FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArrayBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Array";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_ARRAY_TYPE = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>> *value() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>> *>(VT_VALUE);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>> *mutable_value() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>> *>(VT_VALUE);
  }
  ArrayType array_type() const {
    return static_cast<ArrayType>(GetField<int8_t>(VT_ARRAY_TYPE, 0));
  }
  bool mutate_array_type(ArrayType _array_type = static_cast<ArrayType>(0)) {
    return SetField<int8_t>(VT_ARRAY_TYPE, static_cast<int8_t>(_array_type), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.VerifyVectorOfTables(value()) &&
           VerifyField<int8_t>(verifier, VT_ARRAY_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct ArrayBuilder {
  typedef Array Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>>> value) {
    fbb_.AddOffset(Array::VT_VALUE, value);
  }
  void add_array_type(ArrayType array_type) {
    fbb_.AddElement<int8_t>(Array::VT_ARRAY_TYPE, static_cast<int8_t>(array_type), 0);
  }
  explicit ArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Array> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Array>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Array> CreateArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ArrayElement>>> value = 0,
    ArrayType array_type = ArrayType::ListType) {
  ArrayBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_array_type(array_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Array> CreateArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<ArrayElement>> *value = nullptr,
    ArrayType array_type = ArrayType::ListType) {
  auto value__ = value ? _fbb.CreateVector<::flatbuffers::Offset<ArrayElement>>(*value) : 0;
  return CreateArray(
      _fbb,
      value__,
      array_type);
}

/// pylint: skip-file
struct TypedCacheEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TypedCacheEntryBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "TypedCacheEntry";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_TIME = 6,
    VT_TTL = 8,
    VT_EXPIRED = 10,
    VT_VALUE_TYPE = 12,
    VT_VALUE = 14
  };
  const ::flatbuffers::String *key() const {
    return GetPointer<const ::flatbuffers::String *>(VT_KEY);
  }
  ::flatbuffers::String *mutable_key() {
    return GetPointer<::flatbuffers::String *>(VT_KEY);
  }
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  bool mutate_time(double _time = 0.0) {
    return SetField<double>(VT_TIME, _time, 0.0);
  }
  double ttl() const {
    return GetField<double>(VT_TTL, 0.0);
  }
  bool mutate_ttl(double _ttl = 0.0) {
    return SetField<double>(VT_TTL, _ttl, 0.0);
  }
  bool expired() const {
    return GetField<uint8_t>(VT_EXPIRED, 0) != 0;
  }
  bool mutate_expired(bool _expired = 0) {
    return SetField<uint8_t>(VT_EXPIRED, static_cast<uint8_t>(_expired), 0);
  }
  Value value_type() const {
    return static_cast<Value>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Object *value_as_Object() const {
    return value_type() == Value::Object ? static_cast<const Object *>(value()) : nullptr;
  }
  const Bool *value_as_Bool() const {
    return value_type() == Value::Bool ? static_cast<const Bool *>(value()) : nullptr;
  }
  const Long *value_as_Long() const {
    return value_type() == Value::Long ? static_cast<const Long *>(value()) : nullptr;
  }
  const Double *value_as_Double() const {
    return value_type() == Value::Double ? static_cast<const Double *>(value()) : nullptr;
  }
  const String *value_as_String() const {
    return value_type() == Value::String ? static_cast<const String *>(value()) : nullptr;
  }
  const Dict *value_as_Dict() const {
    return value_type() == Value::Dict ? static_cast<const Dict *>(value()) : nullptr;
  }
  const Array *value_as_Array() const {
    return value_type() == Value::Array ? static_cast<const Array *>(value()) : nullptr;
  }
  void *mutable_value() {
    return GetPointer<void *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<double>(verifier, VT_TIME, 8) &&
           VerifyField<double>(verifier, VT_TTL, 8) &&
           VerifyField<uint8_t>(verifier, VT_EXPIRED, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyValue(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Object *TypedCacheEntry::value_as<Object>() const {
  return value_as_Object();
}

template<> inline const Bool *TypedCacheEntry::value_as<Bool>() const {
  return value_as_Bool();
}

template<> inline const Long *TypedCacheEntry::value_as<Long>() const {
  return value_as_Long();
}

template<> inline const Double *TypedCacheEntry::value_as<Double>() const {
  return value_as_Double();
}

template<> inline const String *TypedCacheEntry::value_as<String>() const {
  return value_as_String();
}

template<> inline const Dict *TypedCacheEntry::value_as<Dict>() const {
  return value_as_Dict();
}

template<> inline const Array *TypedCacheEntry::value_as<Array>() const {
  return value_as_Array();
}

struct TypedCacheEntryBuilder {
  typedef TypedCacheEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_key(::flatbuffers::Offset<::flatbuffers::String> key) {
    fbb_.AddOffset(TypedCacheEntry::VT_KEY, key);
  }
  void add_time(double time) {
    fbb_.AddElement<double>(TypedCacheEntry::VT_TIME, time, 0.0);
  }
  void add_ttl(double ttl) {
    fbb_.AddElement<double>(TypedCacheEntry::VT_TTL, ttl, 0.0);
  }
  void add_expired(bool expired) {
    fbb_.AddElement<uint8_t>(TypedCacheEntry::VT_EXPIRED, static_cast<uint8_t>(expired), 0);
  }
  void add_value_type(Value value_type) {
    fbb_.AddElement<uint8_t>(TypedCacheEntry::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(TypedCacheEntry::VT_VALUE, value);
  }
  explicit TypedCacheEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TypedCacheEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TypedCacheEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TypedCacheEntry> CreateTypedCacheEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> key = 0,
    double time = 0.0,
    double ttl = 0.0,
    bool expired = false,
    Value value_type = Value::NONE,
    ::flatbuffers::Offset<void> value = 0) {
  TypedCacheEntryBuilder builder_(_fbb);
  builder_.add_ttl(ttl);
  builder_.add_time(time);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_value_type(value_type);
  builder_.add_expired(expired);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TypedCacheEntry> CreateTypedCacheEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    double time = 0.0,
    double ttl = 0.0,
    bool expired = false,
    Value value_type = Value::NONE,
    ::flatbuffers::Offset<void> value = 0) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  return CreateTypedCacheEntry(
      _fbb,
      key__,
      time,
      ttl,
      expired,
      value_type,
      value);
}

inline bool VerifyValue(::flatbuffers::Verifier &verifier, const void *obj, Value type) {
  switch (type) {
    case Value::NONE: {
      return true;
    }
    case Value::Object: {
      auto ptr = reinterpret_cast<const Object *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::Bool: {
      auto ptr = reinterpret_cast<const Bool *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::Long: {
      auto ptr = reinterpret_cast<const Long *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::Double: {
      auto ptr = reinterpret_cast<const Double *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::String: {
      auto ptr = reinterpret_cast<const String *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::Dict: {
      auto ptr = reinterpret_cast<const Dict *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Value::Array: {
      auto ptr = reinterpret_cast<const Array *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyValueVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Value> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyValue(
        verifier,  values->Get(i), types->GetEnum<Value>(i))) {
      return false;
    }
  }
  return true;
}

inline const TypedCacheEntry *GetTypedCacheEntry(const void *buf) {
  return ::flatbuffers::GetRoot<TypedCacheEntry>(buf);
}

inline const TypedCacheEntry *GetSizePrefixedTypedCacheEntry(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TypedCacheEntry>(buf);
}

inline TypedCacheEntry *GetMutableTypedCacheEntry(void *buf) {
  return ::flatbuffers::GetMutableRoot<TypedCacheEntry>(buf);
}

inline TypedCacheEntry *GetMutableSizePrefixedTypedCacheEntry(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<TypedCacheEntry>(buf);
}

inline const char *TypedCacheEntryIdentifier() {
  return "ns11";
}

inline bool TypedCacheEntryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TypedCacheEntryIdentifier());
}

inline bool SizePrefixedTypedCacheEntryBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TypedCacheEntryIdentifier(), true);
}

inline bool VerifyTypedCacheEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TypedCacheEntry>(TypedCacheEntryIdentifier());
}

inline bool VerifySizePrefixedTypedCacheEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TypedCacheEntry>(TypedCacheEntryIdentifier());
}

inline void FinishTypedCacheEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TypedCacheEntry> root) {
  fbb.Finish(root, TypedCacheEntryIdentifier());
}

inline void FinishSizePrefixedTypedCacheEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TypedCacheEntry> root) {
  fbb.FinishSizePrefixed(root, TypedCacheEntryIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_NS11TYPEDCACHEENTRY_H_
