// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AMO0PSISINQ_H_
#define FLATBUFFERS_GENERATED_AMO0PSISINQ_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct EventMessage;
struct EventMessageBuilder;

struct EventMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EventMessageBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "EventMessage";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_NAME = 4,
    VT_MESSAGE_ID = 6,
    VT_PULSE_TIME = 8,
    VT_TIME_OF_FLIGHT = 10,
    VT_DETECTOR_ID = 12
  };
  const ::flatbuffers::String *source_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  ::flatbuffers::String *mutable_source_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCE_NAME);
  }
  uint64_t message_id() const {
    return GetField<uint64_t>(VT_MESSAGE_ID, 0);
  }
  bool mutate_message_id(uint64_t _message_id = 0) {
    return SetField<uint64_t>(VT_MESSAGE_ID, _message_id, 0);
  }
  uint64_t pulse_time() const {
    return GetField<uint64_t>(VT_PULSE_TIME, 0);
  }
  bool mutate_pulse_time(uint64_t _pulse_time = 0) {
    return SetField<uint64_t>(VT_PULSE_TIME, _pulse_time, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *time_of_flight() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_TIME_OF_FLIGHT);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_time_of_flight() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_TIME_OF_FLIGHT);
  }
  const ::flatbuffers::Vector<uint32_t> *detector_id() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_DETECTOR_ID);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_detector_id() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_DETECTOR_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCE_NAME) &&
           verifier.VerifyString(source_name()) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGE_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_PULSE_TIME, 8) &&
           VerifyOffset(verifier, VT_TIME_OF_FLIGHT) &&
           verifier.VerifyVector(time_of_flight()) &&
           VerifyOffset(verifier, VT_DETECTOR_ID) &&
           verifier.VerifyVector(detector_id()) &&
           verifier.EndTable();
  }
};

struct EventMessageBuilder {
  typedef EventMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_name(::flatbuffers::Offset<::flatbuffers::String> source_name) {
    fbb_.AddOffset(EventMessage::VT_SOURCE_NAME, source_name);
  }
  void add_message_id(uint64_t message_id) {
    fbb_.AddElement<uint64_t>(EventMessage::VT_MESSAGE_ID, message_id, 0);
  }
  void add_pulse_time(uint64_t pulse_time) {
    fbb_.AddElement<uint64_t>(EventMessage::VT_PULSE_TIME, pulse_time, 0);
  }
  void add_time_of_flight(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> time_of_flight) {
    fbb_.AddOffset(EventMessage::VT_TIME_OF_FLIGHT, time_of_flight);
  }
  void add_detector_id(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> detector_id) {
    fbb_.AddOffset(EventMessage::VT_DETECTOR_ID, detector_id);
  }
  explicit EventMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EventMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EventMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EventMessage> CreateEventMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> source_name = 0,
    uint64_t message_id = 0,
    uint64_t pulse_time = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> time_of_flight = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> detector_id = 0) {
  EventMessageBuilder builder_(_fbb);
  builder_.add_pulse_time(pulse_time);
  builder_.add_message_id(message_id);
  builder_.add_detector_id(detector_id);
  builder_.add_time_of_flight(time_of_flight);
  builder_.add_source_name(source_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EventMessage> CreateEventMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *source_name = nullptr,
    uint64_t message_id = 0,
    uint64_t pulse_time = 0,
    const std::vector<uint32_t> *time_of_flight = nullptr,
    const std::vector<uint32_t> *detector_id = nullptr) {
  auto source_name__ = source_name ? _fbb.CreateString(source_name) : 0;
  auto time_of_flight__ = time_of_flight ? _fbb.CreateVector<uint32_t>(*time_of_flight) : 0;
  auto detector_id__ = detector_id ? _fbb.CreateVector<uint32_t>(*detector_id) : 0;
  return CreateEventMessage(
      _fbb,
      source_name__,
      message_id,
      pulse_time,
      time_of_flight__,
      detector_id__);
}

inline const EventMessage *GetEventMessage(const void *buf) {
  return ::flatbuffers::GetRoot<EventMessage>(buf);
}

inline const EventMessage *GetSizePrefixedEventMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EventMessage>(buf);
}

inline EventMessage *GetMutableEventMessage(void *buf) {
  return ::flatbuffers::GetMutableRoot<EventMessage>(buf);
}

inline EventMessage *GetMutableSizePrefixedEventMessage(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<EventMessage>(buf);
}

inline const char *EventMessageIdentifier() {
  return "amo0";
}

inline bool EventMessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EventMessageIdentifier());
}

inline bool SizePrefixedEventMessageBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EventMessageIdentifier(), true);
}

inline bool VerifyEventMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EventMessage>(EventMessageIdentifier());
}

inline bool VerifySizePrefixedEventMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EventMessage>(EventMessageIdentifier());
}

inline void FinishEventMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EventMessage> root) {
  fbb.Finish(root, EventMessageIdentifier());
}

inline void FinishSizePrefixedEventMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EventMessage> root) {
  fbb.FinishSizePrefixed(root, EventMessageIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_AMO0PSISINQ_H_
