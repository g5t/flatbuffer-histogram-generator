// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_X5F2STATUS_H_
#define FLATBUFFERS_GENERATED_X5F2STATUS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Status;
struct StatusBuilder;

struct Status FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StatusBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "Status";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOFTWARE_NAME = 4,
    VT_SOFTWARE_VERSION = 6,
    VT_SERVICE_ID = 8,
    VT_HOST_NAME = 10,
    VT_PROCESS_ID = 12,
    VT_UPDATE_INTERVAL = 14,
    VT_STATUS_JSON = 16
  };
  const ::flatbuffers::String *software_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOFTWARE_NAME);
  }
  ::flatbuffers::String *mutable_software_name() {
    return GetPointer<::flatbuffers::String *>(VT_SOFTWARE_NAME);
  }
  const ::flatbuffers::String *software_version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOFTWARE_VERSION);
  }
  ::flatbuffers::String *mutable_software_version() {
    return GetPointer<::flatbuffers::String *>(VT_SOFTWARE_VERSION);
  }
  const ::flatbuffers::String *service_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE_ID);
  }
  ::flatbuffers::String *mutable_service_id() {
    return GetPointer<::flatbuffers::String *>(VT_SERVICE_ID);
  }
  const ::flatbuffers::String *host_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOST_NAME);
  }
  ::flatbuffers::String *mutable_host_name() {
    return GetPointer<::flatbuffers::String *>(VT_HOST_NAME);
  }
  uint32_t process_id() const {
    return GetField<uint32_t>(VT_PROCESS_ID, 0);
  }
  bool mutate_process_id(uint32_t _process_id = 0) {
    return SetField<uint32_t>(VT_PROCESS_ID, _process_id, 0);
  }
  uint32_t update_interval() const {
    return GetField<uint32_t>(VT_UPDATE_INTERVAL, 0);
  }
  bool mutate_update_interval(uint32_t _update_interval = 0) {
    return SetField<uint32_t>(VT_UPDATE_INTERVAL, _update_interval, 0);
  }
  const ::flatbuffers::String *status_json() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS_JSON);
  }
  ::flatbuffers::String *mutable_status_json() {
    return GetPointer<::flatbuffers::String *>(VT_STATUS_JSON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOFTWARE_NAME) &&
           verifier.VerifyString(software_name()) &&
           VerifyOffset(verifier, VT_SOFTWARE_VERSION) &&
           verifier.VerifyString(software_version()) &&
           VerifyOffset(verifier, VT_SERVICE_ID) &&
           verifier.VerifyString(service_id()) &&
           VerifyOffset(verifier, VT_HOST_NAME) &&
           verifier.VerifyString(host_name()) &&
           VerifyField<uint32_t>(verifier, VT_PROCESS_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_UPDATE_INTERVAL, 4) &&
           VerifyOffset(verifier, VT_STATUS_JSON) &&
           verifier.VerifyString(status_json()) &&
           verifier.EndTable();
  }
};

struct StatusBuilder {
  typedef Status Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_software_name(::flatbuffers::Offset<::flatbuffers::String> software_name) {
    fbb_.AddOffset(Status::VT_SOFTWARE_NAME, software_name);
  }
  void add_software_version(::flatbuffers::Offset<::flatbuffers::String> software_version) {
    fbb_.AddOffset(Status::VT_SOFTWARE_VERSION, software_version);
  }
  void add_service_id(::flatbuffers::Offset<::flatbuffers::String> service_id) {
    fbb_.AddOffset(Status::VT_SERVICE_ID, service_id);
  }
  void add_host_name(::flatbuffers::Offset<::flatbuffers::String> host_name) {
    fbb_.AddOffset(Status::VT_HOST_NAME, host_name);
  }
  void add_process_id(uint32_t process_id) {
    fbb_.AddElement<uint32_t>(Status::VT_PROCESS_ID, process_id, 0);
  }
  void add_update_interval(uint32_t update_interval) {
    fbb_.AddElement<uint32_t>(Status::VT_UPDATE_INTERVAL, update_interval, 0);
  }
  void add_status_json(::flatbuffers::Offset<::flatbuffers::String> status_json) {
    fbb_.AddOffset(Status::VT_STATUS_JSON, status_json);
  }
  explicit StatusBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Status> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Status>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Status> CreateStatus(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> software_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> software_version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> service_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> host_name = 0,
    uint32_t process_id = 0,
    uint32_t update_interval = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status_json = 0) {
  StatusBuilder builder_(_fbb);
  builder_.add_status_json(status_json);
  builder_.add_update_interval(update_interval);
  builder_.add_process_id(process_id);
  builder_.add_host_name(host_name);
  builder_.add_service_id(service_id);
  builder_.add_software_version(software_version);
  builder_.add_software_name(software_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Status> CreateStatusDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *software_name = nullptr,
    const char *software_version = nullptr,
    const char *service_id = nullptr,
    const char *host_name = nullptr,
    uint32_t process_id = 0,
    uint32_t update_interval = 0,
    const char *status_json = nullptr) {
  auto software_name__ = software_name ? _fbb.CreateString(software_name) : 0;
  auto software_version__ = software_version ? _fbb.CreateString(software_version) : 0;
  auto service_id__ = service_id ? _fbb.CreateString(service_id) : 0;
  auto host_name__ = host_name ? _fbb.CreateString(host_name) : 0;
  auto status_json__ = status_json ? _fbb.CreateString(status_json) : 0;
  return CreateStatus(
      _fbb,
      software_name__,
      software_version__,
      service_id__,
      host_name__,
      process_id,
      update_interval,
      status_json__);
}

inline const Status *GetStatus(const void *buf) {
  return ::flatbuffers::GetRoot<Status>(buf);
}

inline const Status *GetSizePrefixedStatus(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Status>(buf);
}

inline Status *GetMutableStatus(void *buf) {
  return ::flatbuffers::GetMutableRoot<Status>(buf);
}

inline Status *GetMutableSizePrefixedStatus(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<Status>(buf);
}

inline const char *StatusIdentifier() {
  return "x5f2";
}

inline bool StatusBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, StatusIdentifier());
}

inline bool SizePrefixedStatusBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, StatusIdentifier(), true);
}

inline bool VerifyStatusBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Status>(StatusIdentifier());
}

inline bool VerifySizePrefixedStatusBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Status>(StatusIdentifier());
}

inline void FinishStatusBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Status> root) {
  fbb.Finish(root, StatusIdentifier());
}

inline void FinishSizePrefixedStatusBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Status> root) {
  fbb.FinishSizePrefixed(root, StatusIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_X5F2STATUS_H_
